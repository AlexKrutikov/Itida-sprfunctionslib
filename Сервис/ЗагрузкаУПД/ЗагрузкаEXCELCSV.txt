ИмяФайла		= ФАЙЛВЫБРАТЬ( 1, "Файлы MS Excel и XML|*.xlsx;*.csv;*.xml" );
IF ( ПУСТО( ИмяФайла ) ) RETURN REPLICATE( "-", 10 );

// Формируем таблицу из 200 полей для первоначальной загрузки данных
ИмяВременнойТаблицы		= "##" + УНИКАЛЬНОЕИМЯ( );
ВременныйКаталог		= ВРЕМЕННЫЙКАТАЛОГ( );
СтрокаЗапроса			= "CREATE TABLE " + ИмяВременнойТаблицы + "( field0 varchar( 250 )";
FOR ( index = 1; index < 200; index ++ )
	СтрокаЗапроса		+= ",field" + STR( index ) + " varchar( 250 )";

СтрокаЗапроса		+= ")";
ЗАПРОС( СтрокаЗапроса );
ДОБАВИТЬКОНТЕКСТ( "SELECT * FROM " + ИмяВременнойТаблицы, "ЛокальныеДанные" );
ЗАПРОС( "DROP TABLE " + ИмяВременнойТаблицы );
	
IF ( LOWER( ПРАВСИМВ( ИмяФайла, 4 ) ) == "xlsx" )
{
	// Преварительно удаляем разархивируемые файлы
	ФАЙЛУДАЛИТЬ( ВременныйКаталог + "sheet1.xml" );
	ФАЙЛУДАЛИТЬ( ВременныйКаталог + "SharedStrings.xml" );

	ВЫПОЛНИТЬ( "unzip.exe", "-C -j """ + ИмяФайла + """ xl\worksheets\sheet1.xml -d " + ВременныйКаталог, "", "open", 3 );
	ВЫПОЛНИТЬ( "unzip.exe", "-C -j """ + ИмяФайла + """ xl\SharedStrings.xml -d " + ВременныйКаталог, "",  "open", 3 );
	
	IF ( !ФАЙЛ( ВременныйКаталог + "sheet1.xml" ) OR !ФАЙЛ( ВременныйКаталог + "SharedStrings.xml" ) )
	{
		СООБЩЕНИЕ( "Выбранный файл не является XLSX файлов. Выберите, пожалуйста, другой файл." );
		RETURN REPLICATE( "-", 10 );
	}
	
	// Необходимо загрузить список строк и значений в два курсора, затем перенести в общий курсор ЛокальныеДанные
	ЗАПРОС( "CREATE TABLE " + ИмяВременнойТаблицы + "( r varchar( 250 ), v varchar( 250 ), t varchar( 250 )  )" );
	ДОБАВИТЬКОНТЕКСТ( "SELECT * FROM " + ИмяВременнойТаблицы, "Строки" );
	ЗАПРОС( "DROP TABLE " + ИмяВременнойТаблицы );
	ЗАГРУЗИТЬ( "Строки", "XML", ВременныйКаталог + "sheet1.xml", "", "", "c" );
	
	ЗАПРОС( "CREATE TABLE " + ИмяВременнойТаблицы + "( t varchar( 250 ) )" );
	ДОБАВИТЬКОНТЕКСТ( "SELECT * FROM " + ИмяВременнойТаблицы, "Значения" );0
	ЗАПРОС( "DROP TABLE " + ИмяВременнойТаблицы );
	ЗАГРУЗИТЬ( "Значения", "XML", ВременныйКаталог + "SharedStrings.xml", "si", "" );
	
	// Файлы более не нужны
	ФАЙЛУДАЛИТЬ( ВременныйКаталог + "sheet1.xml" );
	ФАЙЛУДАЛИТЬ( ВременныйКаталог + "SharedStrings.xml" );

	//Ф		= ФАЙЛСоздать( "D:\test.txt" );
	ПЕРЕЙТИВНАЧАЛО( "Строки" );
	WHILE ( !КОНЕЦКОНТЕКСТА( "Строки" ) )
	{
		НомерСимволаСтроки	= ЕСЛИ( ЯВЛЯЕТСЯЦИФРОЙ( ПОДСТРОКА( Строки.r, 2, 1 ) ), 2, 3 );
		НомерКолонки		= ЛЕВСИМВ( Строки.r, НомерСимволаСтроки - 1 );
		НомерСтроки			= VAL( ПОДСТРОКА( Строки.r, НомерСимволаСтроки ) );
		НомерКолонки		= КОДСИМВОЛА( ПРОПИСНЫЕ( ПРАВСИМВ( НомерКолонки, 1 ) ) ) - КОДСИМВОЛА( "A" ) + ЕСЛИ( НомерСимволаСтроки == 3, ( КОДСИМВОЛА( ПРОПИСНЫЕ( ЛЕВСИМВ( НомерКолонки, 1 ) ) ) - КОДСИМВОЛА( "A" ) + 1 ) * 26, 0 );
		//ФАЙЛЗАПИСАТЬСТРОКУ( Ф,  "r= " + Строки.r + "; НомерСимволаСтроки= " + НомерСимволаСтроки + "; НомерСтроки= " + НомерСтроки + "; НомерКолонки= " + НомерКолонки );
		IF ( КОЛИЧЕСТВОСТРОК( "ЛокальныеДанные" ) < НомерСтроки )
			ДОБАВИТЬСТРОКИ( НомерСтроки - КОЛИЧЕСТВОСТРОК( "ЛокальныеДанные" ), "ЛокальныеДанные" );
		
		ЗначениеПоля		= Строки.v;
		IF ( Строки.t == "s" )
		{
			ПЕРЕЙТИ( VAL( Строки.v ), "Значения" );
			ЗначениеПоля	= Значения.t;
		}
		ПЕРЕЙТИ( НомерСтроки - 1, "ЛокальныеДанные" );
		ИЗМЕНИТЬПОЛЕ( "ЛокальныеДанные", НомерКолонки, ЗначениеПоля );
		ПРОПУСТИТЬ( 1, "Строки" );
	}
	
	/*ВЫБРАТЬКОНТЕКСТ( "ЛокальныеДанные" );
	ПЕРЕЙТИВНАЧАЛО(  "ЛокальныеДанные" );
	ПОКА ( !КОНЕЦКОНТЕКСТА( "ЛокальныеДанные" ) )
	{
		Строка		= ЗНАЧЕНИЕПОЛЯ( 0 );
		FOR ( индекс = 1; индекс < 200; индекс++ )
			Строка	+= ";" + ЗНАЧЕНИЕПОЛЯ( индекс );
		ФАЙЛЗАПИСАТЬСТРОКУ( Ф,  Строка );
		ПРОПУСТИТЬ( 1, "ЛокальныеДанные" );
	}
	ФАЙЛЗАКРЫТЬ( Ф );
	*/
	
	УДАЛИТЬКОНТЕКСТ( "Строки" );
	УДАЛИТЬКОНТЕКСТ( "Значения" );
}
ELSE IF ( LOWER( ПРАВСИМВ( ИмяФайла, 3 ) ) == "csv" )
{
	// Загружаем CSV в таблицу 
	ЗАГРУЗИТЬ( "ЛокальныеДанные", "csv", ИмяФайла, ";" );
}
ELSE IF ( LOWER( ПРАВСИМВ( ИмяФайла, 3 ) ) == "xml" )
{
	RETURN Сервис.ЗагрузитьУПДИзXMLЭДО( ИмяФайла );
}
ELSE 
{
	СООБЩЕНИЕ( "Выбранный файл не является ни MS Excel файлом, ни XML файлом. Выберите, пожалуйста, другой файл." );
	RETURN REPLICATE( "-", 10 );
}

// Создаем временную таблицу для сбора товаров
ЗАПРОС( "CREATE TABLE " + ИмяВременнойТаблицы + "( npp varchar( 10 ), name varchar( 250 ), vendorware varchar( 250 ), ed varchar( 20 ), barcode varchar( 250 ), kolp float, cena float, summa float, sumnds float,
												   sumwonds float, cenawonds float, vendor varchar( 250 ), vendorname varchar( 250 ), vendorinn varchar( 250 ), vendorkpp varchar( 250 ), vendorrs varchar( 250 ), 
												   vendorbik varchar( 250 ), vendoraddress varchar( 250 ), sklad varchar( 250 ), skladaddress varchar( 250 ), code char( 10 ), vendorndok varchar( 250 ), vendordate datetime, 
												   identity_column int IDENTITY( 1, 1 ) )" );
ВЫБРАТЬКОНТЕКСТ( "ЛокальныеДанные" );
ПЕРЕЙТИВНАЧАЛО( "ЛокальныеДанные" );

Грузополучатель			= "";
Поставщик				= "";
ПоставщикАдрес			= "";
НомерНакладной			= "";
ДатаНакладной			= "";
Состояние				= 0;
НомерПоля				= 0;
ПокупательНайден		= false;
ЭТОУПД					= false;
ЭТОУПД_В2				= false;
ЗНАЧЕНИЕДЛЯПОЛЯ[ 1 ]	= "А";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 2 ]	= "Б";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 3 ]	= "1";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 4 ]	= "1";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 5 ]	= "2";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 6 ]	= "2";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 7 ]	= "3";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 8 ]	= "4";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 9 ]	= "5";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 10 ]	= "6";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 11 ]	= "7";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 12 ]	= "8";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 13 ]	= "9";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 14 ]	= "10";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 15 ]	= "10";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 16 ]	= "11";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 17 ]	= "12";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 18 ]	= "12";
ЗНАЧЕНИЕДЛЯПОЛЯ[ 19 ]	= "13";

FOR ( локальный_индекс = 1; локальный_индекс <= 20; локальный_индекс++ ) ПОЛЕ[ локальный_индекс ]	= -1;
// Сначала ищем грузополучателя и поставщика
WHILE ( !КОНЕЦКОНТЕКСТА( "ЛокальныеДанные" ) && Состояние != 5 )
{
	Состояние			= 0;
	НомерПоля			= 0;
	FOR ( индекс = 0; индекс < 200; индекс++ )
	{
		ЗначениеПоля	= СЖАТЬПРОБЕЛЫ( ЗНАЧЕНИЕПОЛЯ( индекс ) );
		IF ( Состояние == 0 AND ( ПРОПИСНЫЕ( ЗначениеПоля ) == "ПОСТАВЩИК" OR ЛЕВСИМВ( ПРОПИСНЫЕ( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ) ), 8 ) == "ПРОДАВЕЦ" ) )
		{
			Состояние = 1;
			IF ( ДЛИНА( ПОДСТРОКА( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ), 10 ) ) > 2 ) 
				Поставщик	= ПОДСТРОКА( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ), 10 );
		}
		ELSE IF ( Состояние == 0 AND ЛЕВСИМВ( ПРОПИСНЫЕ( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ) ), 10 ) == "ПОКУПАТЕЛЬ" )
			ПокупательНайден = true;
		ELSE IF ( Состояние == 0 AND ЛЕВСИМВ( ПРОПИСНЫЕ( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ) ), 16 ) == "ИНН/КПП ПРОДАВЦА" )
		{
			Состояние = 6;
			IF ( ДЛИНА( ПОДСТРОКА( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ), 16 ) ) > 2 ) 
			{
				ЗначениеПоля	= ПОДСТРОКА( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ), 16 );
				Разделитель	= ПОЗИЦИЯ( ЗначениеПоля, "/" ) + ПОЗИЦИЯ( ЗначениеПоля, "\" );
				IF ( Разделитель > 0 )
					Поставщик	+= " ИНН " + ЛЕВСИМВ( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ), Разделитель ) + " КПП " + ПОДСТРОКА( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ), Разделитель + 1 );
				ELSE
					Поставщик	+= " ИНН " + СЖАТЬПРОБЕЛЫ( ЗначениеПоля );
			}
		}
		ELSE IF ( Состояние == 0 AND !ПокупательНайден AND ЛЕВСИМВ( ПРОПИСНЫЕ( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ) ), 5 ) == "АДРЕС" )
		{
			Состояние = 7;
			IF ( ДЛИНА( ПОДСТРОКА( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ), 7 ) ) > 2 ) 
				ПоставщикАдрес	= ПОДСТРОКА( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ), 7 );
		}
		ELSE IF ( Состояние == 0 AND ПРОПИСНЫЕ( ЗначениеПоля ) == "ГРУЗОПОЛУЧАТЕЛЬ" )
			Состояние = 2;
		ELSE IF ( Состояние == 0 AND ( ПРОПИСНЫЕ( ЗначениеПоля ) == "ТОВАРНАЯ НАКЛАДНАЯ" OR ЛЕВСИМВ( ПРОПИСНЫЕ( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ) ), 12 ) == "СЧЕТ-ФАКТУРА" ) )
		{
			Состояние = 3;
			ЭТОУПД		= ЛЕВСИМВ( ПРОПИСНЫЕ( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ) ), 12 ) == "СЧЕТ-ФАКТУРА";
			IF ( ЭТОУПД && ДЛИНА( ПОДСТРОКА( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ), 13 ) ) > 0 )
			{
				НомерНакладной	= ЛЕВСИМВ( ПОДСТРОКА( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ), 13 ), 30 );
				Состояние		= 4;	// Дата в этой же строке далее
			}
		}
		ELSE IF ( Состояние == 0 AND ( ПРОПИСНЫЕ( ЗначениеПоля ) == "ВСЕГО ПО НАКЛАДНОЙ" OR ПРОПИСНЫЕ( ЗначениеПоля ) == "ВСЕГО К ОПЛАТЕ" ) )
			Состояние = 5;
		ELSE IF ( Состояние == 1 && !ПУСТО( ЗначениеПоля ) )
		{
			Поставщик	+= ЗначениеПоля;
			Состояние	= 0;
		}
		ELSE IF ( Состояние == 6 && !ПУСТО( ЗначениеПоля ) )
		{
			Разделитель	= ПОЗИЦИЯ( ЗначениеПоля, "/" ) + ПОЗИЦИЯ( ЗначениеПоля, "\" );
			IF ( Разделитель > 0 )
				Поставщик	+= " ИНН " + ЛЕВСИМВ( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ), Разделитель ) + " КПП " + ПОДСТРОКА( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ), Разделитель + 1 );
			ELSE
				Поставщик	+= " ИНН " + СЖАТЬПРОБЕЛЫ( ЗначениеПоля );
			Состояние	= 0;
		}
		ELSE IF ( Состояние == 7 && !ПУСТО( ЗначениеПоля ) )
		{
			ПоставщикАдрес	= СЖАТЬПРОБЕЛЫ( ЗначениеПоля );
			Состояние		= 0;
		}
		ELSE IF ( Состояние == 2 && !ПУСТО( ЗначениеПоля ) )
		{
			Грузополучатель	= ЗначениеПоля;
			Состояние		= 0;
		}
		ELSE IF ( Состояние == 3 && !ПУСТО( ЗначениеПоля ) && ПУСТО( НомерНакладной ) )
		{
			НомерНакладной	= ЛЕВСИМВ( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ), 30 );
			Состояние		= 4;	// Дата в этой же строке далее
		}
		ELSE IF ( Состояние == 4 && !ПУСТО( ЗначениеПоля ) && ПУСТО( ДатаНакладной ) )
		{
			ДатаНакладной	= ЗначениеПоля;
			Состояние		= 0;	// В этой строке больше ничего нет
		}
		ELSE IF ( !ЭТОУПД )
		{
			IF ( Состояние == 0 && !ПУСТО( ЗначениеПоля ) && VAL( ЗначениеПоля ) == НомерПоля + 1 )
			{
				НомерПоля++;
				ПОЛЕ[ НомерПоля ]	= индекс;
			}
			ELSE IF ( Состояние == 0 && НомерПоля != 0 && !ПУСТО( ЗначениеПоля ) && НомерПоля < 15 )
			{
				// Если посчитали, что нашои подзаголовк таблицы с номерами поле, а встретилось инродное поле, то сбрасываем счетчик
				НомерПоля			= 0;
				FOR ( локальный_индекс = 1; локальный_индекс <= 20; локальный_индекс++ ) ПОЛЕ[ локальный_индекс ]	= -1;
			}
		}
		ELSE IF ( ЭТОУПД )
		{
			IF ( !ПУСТО( ЗначениеПоля ) && Состояние == 0 )
			{
				КорректноеПоле	= false;
				IF ( НомерПоля < 19 )
				{
					// Для УПД версии 2 второе поле 1, а не Б
					IF (  ПРОПИСНЫЕ( СЖАТЬПРОБЕЛЫ( ЗначениеПоля ) ) == ЗНАЧЕНИЕДЛЯПОЛЯ[ НомерПоля + 1 ] || 
						( ЧИСЛО( ЗначениеПоля ) != 0 && ЧИСЛО( ЗначениеПоля ) == ЧИСЛО( ЗНАЧЕНИЕДЛЯПОЛЯ[ НомерПоля + 1 ] ) ) ||
						( НомерПоля == 1 && ЧИСЛО( ЗначениеПоля ) == 1 ) )
					{
						IF ( НомерПоля == 1 && ЧИСЛО( ЗначениеПоля ) == 1 )
							ЭТОУПД_В2		= true;

						НомерПоля++;
						ПОЛЕ[ НомерПоля ]	= индекс;
						КорректноеПоле		= true;
					}
				}
				IF ( !КорректноеПоле && НомерПоля != 0 && НомерПоля < 16 )
				{
					// Если посчитали, что нашои подзаголовк таблицы с номерами поле, а встретилось инородное поле, то сбрасываем счетчик
					НомерПоля			= 0;
					FOR ( локальный_индекс = 1; локальный_индекс <= 20; локальный_индекс++ ) ПОЛЕ[ локальный_индекс ]	= -1;
				}
			}
		}
	}
	// Нашли начало таблицы. Со следующей строки должны идти строки накладной
	IF ( НомерПоля >= 15 )
	{
		ПРОПУСТИТЬ( 1, "ЛокальныеДанные" );
		// Между заголовком и таблицей могут быть пустые строки. пропускаем их
		WHILE ( !КОНЕЦКОНТЕКСТА( "ЛокальныеДанные" ) && VAL( ЕСЛИ( ЭТОУПД_В2, ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 2 ] ), ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 1 ] ) ) ) == 0 )
		{
			ПРОПУСТИТЬ( 1, "ЛокальныеДанные" );
		}
			
		СТОП					= false;
		WHILE ( !КОНЕЦКОНТЕКСТА( "ЛокальныеДанные" ) && !СТОП )
		{
			IF ( !ЭТОУПД )
			{
				НомерПоПорядку		= ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 1 ] );
				НаименованиеТовара	= ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 2 ] );
				КодТовара			= ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 3 ] );
				ЕдиницаИзмерения	= ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 4 ] );
				Количество			= VAL( ЗАМЕНИТЬ( ЗАМЕНИТЬ( ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 10 ] ), " ", "" ), CHR( 160 ), "" ) );
				Сумма				= VAL( ЗАМЕНИТЬ( ЗАМЕНИТЬ( ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 15 ] ), " ", "" ), CHR( 160 ), "" ) );
				Цена				= Сумма / ЕСЛИ( Количество != 0, Количество, 1 );
				СуммаБезНДС			= VAL( ЗАМЕНИТЬ( ЗАМЕНИТЬ( ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 12 ] ), " ", "" ), CHR( 160 ), "" ) );
				ЦенаБезНДС			= VAL( ЗАМЕНИТЬ( ЗАМЕНИТЬ( ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 11 ] ), " ", "" ), CHR( 160 ), "" ) );
				СуммаНДС			= Сумма - СуммаБезНДС;
				ШтрихКод			= "";
				IF ( ПОЛЕ[ 16 ] >= 0 )
					ШтрихКод		= ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 16 ] );
			}
			ELSE
			{
				НомерПоПорядку		= ЕСЛИ( ЭТОУПД_В2, ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 2 ] ), ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 1 ] ) );
				НаименованиеТовара	= ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 3 ] );
				КодТовара			= ЕСЛИ( ЭТОУПД_В2, ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 1 ] ), ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 2 ] ) );
				ЕдиницаИзмерения	= ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 6 ] );
				Количество			= VAL( ЗАМЕНИТЬ( ЗАМЕНИТЬ( ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 7 ] ), " ", "" ), CHR( 160 ), "" ) );
				Сумма				= VAL( ЗАМЕНИТЬ( ЗАМЕНИТЬ( ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 13 ] ), " ", "" ), CHR( 160 ), "" ) );
				Цена				= Сумма / ЕСЛИ( Количество != 0, Количество, 1 );
				СуммаБезНДС			= VAL( ЗАМЕНИТЬ( ЗАМЕНИТЬ( ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 9 ] ), " ", "" ), CHR( 160 ), "" ) );
				ЦенаБезНДС			= VAL( ЗАМЕНИТЬ( ЗАМЕНИТЬ( ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 8 ] ), " ", "" ), CHR( 160 ), "" ) );
				СуммаНДС			= Сумма - СуммаБезНДС;
				ШтрихКод			= "";
				IF ( ПОЛЕ[ 19 ] >= 0 )
					ШтрихКод		= ЗНАЧЕНИЕПОЛЯ( ПОЛЕ[ 19 ] );
			}
			// Добавляем запись 
			IF ( VAL( НомерПоПорядку ) != 0 )
				ЗАПРОС( "INSERT INTO " + ИмяВременнойТаблицы + "( npp, name, vendorware, ed, kolp, cena, summa, sumnds, sumwonds, cenawonds, barcode )
						 VALUES ( '" + STDF( НомерПоПорядку, 5 ) + "', '" + STDF( НаименованиеТовара ) + "', '" + STDF( КодТовара ) + "', '" + STDF( ЕдиницаИзмерения ) + "', " + 
									   STR( Количество, 20, 8 ) + ", " + STR( Цена, 20, 8 ) + ", " + STR( Сумма, 20, 8 ) + ", " + STR( СуммаНДС, 20, 8 ) + ", " +
									   STR( СуммаБезНДС, 20, 8 ) + ", " + STR( ЦенаБезНДС, 20, 8 ) + ", '" + STDF( ШтрихКод ) + "' )" );
			ELSE
				СТОП			= true;
			ПРОПУСТИТЬ( 1, "ЛокальныеДанные" );
		}
	}
	ПРОПУСТИТЬ( 1, "ЛокальныеДанные" );
}
//СООБЩЕНИЕ( НомерНакладной + " " + ДатаНакладной ); //+ " " + Грузополучатель + " " + Поставщик + " " + ИмяВременнойТаблицы );
IF ( ПУСТО( CTOD( ДатаНакладной ) ) )
	ДатаНакладной		= DTOC( ДОБАВИТЬДНИ( {01.01.1900}, VAL( ДатаНакладной ) - 2 ) );
IF ( !ПУСТО( ПоставщикАдрес ) )
	Поставщик			+= " " + ПоставщикАдрес;
	
//СООБЩЕНИЕ( НомерНакладной + " " + ДатаНакладной ); //+ " " + Грузополучатель + " " + Поставщик + " " + ИмяВременнойТаблицы );

// Определяем поставщика
// Ищем слово ИНН и берем набор цифр после этого слова
ПоставщикНаименование	= "";
ПоставщикИНН			= "";
ПоставщикКПП			= "";
ПоставщикАдрес			= "";
ПоставщикРС				= "";
ПоставщикБИК			= "";

//Поставщик						= SUBSTR( Поставщик, AT( Поставщик, "ИНН" ) + 3 );
// Пускаем пустые символы
// Так немного дольше, но зато не привязываемся к символам разделителям ИНН и КПП (которого может и не быть)
//WHILE ( !ПУСТО( Поставщик ) AND LEFT( Поставщик, 1 ) <> "0" AND VAL( LEFT( Поставщик, 1 ) ) == 0 )
//	Поставщик	= SUBSTR( Поставщик, 2 );
	
Состояние				= 1;	
WHILE ( !ПУСТО( Поставщик ) )
{
	ОдинСимвол			= ЛЕВСИМВ( Поставщик, 1 );
	ТриСимвола			= ПРОПИСНЫЕ( ЛЕВСИМВ( Поставщик, 3 ) );
	КоличествоСимволов	= 1;
	IF ( ТриСимвола == "ИНН" )
	{
		Состояние			= 2;
		КоличествоСимволов	= 3;
	}
	IF ( ТриСимвола == "КПП" )
	{
		Состояние			= 3;
		КоличествоСимволов	= 3;
	}
	ELSE IF ( ТриСимвола == "Р/С" )
	{
		Состояние			= 4;
		КоличествоСимволов	= 3;
	}
	ELSE IF ( ТриСимвола == "БИК" )
	{
		Состояние			= 5;
		КоличествоСимволов	= 3;
	}
	ELSE IF ( Состояние == 1 AND ОдинСимвол == "," AND !ПУСТО( ПоставщикИНН ) )	// После названия может идти ИНН/КПП или адрес. Если ИНН уже был, то должен быть адрес. 
		Состояние	= 6;
	ELSE IF ( Состояние == 1 AND ОдинСимвол == "," )
		Состояние	= 0;
	ELSE IF ( Состояние == 1 )
		ПоставщикНаименование	+= ОдинСимвол;
	ELSE IF ( Состояние == 6 )
		ПоставщикАдрес	+= ОдинСимвол;
	ELSE IF ( ВСПИСКЕ( Состояние, 2, 3, 4, 5, 20, 30, 40, 50 ) AND ЯВЛЯЕТСЯЦИФРОЙ( ОдинСимвол ) )
	{
		IF ( Состояние < 20  ) Состояние	*= 10 ;
		IF ( Состояние == 20 ) ПоставщикИНН	+= ОдинСимвол;
		IF ( Состояние == 30 ) ПоставщикКПП	+= ОдинСимвол;
		IF ( Состояние == 40 ) ПоставщикРС	+= ОдинСимвол;
		IF ( Состояние == 50 ) ПоставщикБИК	+= ОдинСимвол;
	}
	ELSE IF ( Состояние >= 20 AND ПУСТО( ПоставщикНаименование ) ) Состояние	= 1;
	ELSE IF ( Состояние >= 20 AND ПУСТО( ПоставщикАдрес )  ) Состояние	= 6;
	
	Поставщик		= ПОДСТРОКА( Поставщик, КоличествоСимволов + 1 );
}

ПоставщикНаименование	= СЖАТЬПРОБЕЛЫ( ПоставщикНаименование );
ПоставщикАдрес			= СЖАТЬПРОБЕЛЫ( ПоставщикАдрес );
IF ( ПРАВСИМВ( ПоставщикНаименование, 1 ) == "," )
	ПоставщикНаименование	= СЖАТЬПРОБЕЛЫ( ЛЕВСИМВ( ПоставщикНаименование, ДЛИНА( ПоставщикНаименование ) - 1 ) );
IF ( ПРАВСИМВ( ПоставщикАдрес, 1 ) == "," )
	ПоставщикАдрес			= СЖАТЬПРОБЕЛЫ( ЛЕВСИМВ( ПоставщикАдрес, ДЛИНА( ПоставщикАдрес ) - 1 ) );
IF ( ПРОПИСНЫЕ( ЛЕВСИМВ( ПоставщикАдрес, 5 ) ) == "АДРЕС" )
	ПоставщикАдрес			= СЖАТЬПРОБЕЛЫ( ПОДСТРОКА( ПоставщикАдрес, 6 ) );
IF ( ЛЕВСИМВ( ПоставщикАдрес, 1 ) == ":" )
	ПоставщикАдрес			= СЖАТЬПРОБЕЛЫ( ПОДСТРОКА( ПоставщикАдрес, 2 ) );

// По ИНН определяем код поставщика
Поставщик			= ЕСЛИ( ПУСТО( ПоставщикИНН ), "", ЗАПРОС( "SELECT code FROM sprclient WHERE inn= '" + STDF( ПоставщикИНН ) + "' " + ЕСЛИ( !ПУСТО( ПоставщикКПП ), " AND kpp = '" + STDF( ПоставщикКПП ) + "'", "" ) ) );
IF ( ПУСТО( Поставщик ) AND !ПУСТО( ПоставщикИНН ) AND !ПУСТО( ПоставщикКПП ) )
	Поставщик		= ЗАПРОС( "SELECT code FROM sprclient WHERE inn= '" + STDF( ПоставщикИНН ) + "' " );
IF ( ПУСТО( Поставщик ) AND !ПУСТО( ПоставщикНаименование ) )
	Поставщик			= ЗАПРОС( "SELECT code FROM sprclient WHERE name= '" + STDF( ПоставщикНаименование ) + "'" );

// Для определения склада используем следующий алгоритм
// Сначала ищем название склада без пробелов в строке Грузополучатель.
Склад 				= ЗАПРОС( "SELECT code FROM sprskl WHERE CHARINDEX( REPLACE( RTRIM( name ), ' ', '' ), '" + STDF( STRTRAN( Грузополучатель, " " , "" ) ) + "' ) > 0" );
// Если склад не нашелся, то ищем его по наличию в поле грузополучатель в шапке эксель-документа обоих ключевых слов
IF ( ПУСТО( Склад ) ) 
{
	Склад 			= ЗАПРОС( "DECLARE @address varchar( 250 );
							   SELECT @address= '" + STDF( Грузополучатель ) + "';
							   SELECT code 
							   FROM sprskl 
							   WHERE CHARINDEX( SUBSTRING( ex_code, 1, CHARINDEX( ' ', RTRIM( ex_code ) ) ), @address ) > 0 AND
									 CHARINDEX( LTRIM( RTRIM( SUBSTRING( ex_code, CHARINDEX( ' ', RTRIM( ex_code ) ), 50 ) ) ), 
									 SUBSTRING( @address, CHARINDEX( SUBSTRING( ex_code, 1, CHARINDEX( ' ', RTRIM( ex_code ) ) ), @address ) + LEN( SUBSTRING( ex_code, 1, CHARINDEX( ' ', RTRIM( ex_code ) ) ) ), 250 ) ) > 0" );
}

// Записываем найденных поставщика и склад
__SQL
{
	UPDATE temp 
	SET vendor			= '[[STDF( Поставщик )]]',
		vendorName		= '[[STDF( ПоставщикНаименование )]]',
		vendorAddress	= '[[STDF( ПоставщикАдрес )]]',
		vendorINN		= '[[STDF( ПоставщикИНН )]]',
		vendorKPP		= '[[STDF( ПоставщикКПП )]]',
		vendorRS		= '[[STDF( ПоставщикРС )]]',
		vendorBIK		= '[[STDF( ПоставщикБИК )]]',
		sklad			= '[[STDF( Склад )]]',
		skladaddress	= '[[STDF( Грузополучатель )]]',
		vendorndok		= '[[STDF( НомерНакладной )]]',
		vendordate		= '[[DTOC( CTOD( ДатаНакладной ) )]]',
		code			= ''
	FROM [[ИмяВременнойТаблицы]] temp
}

// Если удалось найти поставщика, то ищем в его кодах коды товаров
__SQL
{
	UPDATE temp
	SET code		= ISNULL( ( SELECT TOP 1 code FROM sprres_clients WHERE ex_code = temp.vendorware AND client= temp.vendor ), '' )
	FROM [[ИмяВременнойТаблицы]] temp 
	WHERE code = '' AND vendor <> '';

	UPDATE temp
	SET code		= ISNULL( ( SELECT TOP 1 nn FROM sprnnbc WHERE bc = temp.barcode ), '' )
	FROM [[ИмяВременнойТаблицы]] temp 
	WHERE code = '' AND barcode <> '';
}

/*	UPDATE temp
	SET code		= ISNULL( ( SELECT TOP 1 code FROM sprres WHERE ex_code = temp.vendorware AND cat = '002' ), '' )
	FROM [[ИмяВременнойТаблицы]] temp 
	WHERE code = '';

	UPDATE temp
	SET code		= ISNULL( ( SELECT TOP 1 code FROM sprres WHERE name = temp.name ), '' )
	FROM [[ИмяВременнойТаблицы]] temp 
	WHERE code = '' AND name <> '';
*/

RETURN ИмяВременнойТаблицы;
