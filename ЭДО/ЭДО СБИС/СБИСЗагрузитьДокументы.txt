ДАТАЗАГРУЗКИ			= CTOD( ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'EDI_EDIDOWNLOADDATE" + ПРЕДПРИЯТИЕ + "'" ) );СКРИПТПРОВЕРКИ			= ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'EDI_EDICHECKIN_EX" + ПРЕДПРИЯТИЕ + "'" );IF ( РАЗНИЦАДАТ( ДАТАЗАГРУЗКИ, ДАТА( ), "day" ) > 30 )	ДАТАЗАГРУЗКИ		= ДОБАВИТЬДНИ( ДАТА( ), -30 );СБИСТОКЕН				= ЭДО.СБИСАвторизация( ПРЕДПРИЯТИЕ );IF ( ПУСТО( СБИСТОКЕН ) ) RETURN false;ИмяТаблицыИД			= "##" + УНИКАЛЬНОЕИМЯ( );IF ( !ЗАПРОС( "CREATE TABLE " + ИмяТаблицыИД + " ( id varchar( 50 ), edition varchar( 50 ), uri varchar( 2048 ), filename varchar( 2048) )" ) ) RETURN false;АдресСервера 			= ЭДО.СБИСАдресСервера( false );Заголовки[ 0 ]			= "Content-Type: application/json-rpc;charset=utf-8";Заголовки[ 1 ]			= "X-SBISSessionID: " + СБИСТОКЕН;ЗаголовкиДок[ 0 ]		= "X-SBISSessionID: " + СБИСТОКЕН;ИДСобытия				= "";НоваяРедакция			= "";ПереданоВМаркировку		= "";ПропущеноДокументов		= 0;ИМЯПЕРЕМЕННОЙ			= "";try{	ТекстОшибки			= "Сервер " + АдресСервера + CHR( 13 ) + "вернул сообщение об ошибке: " + CHR( 13 );	Соединение 			= HTTPCONNECT( АдресСервера, "", true, ЭДО.ФАЙЛЖУРНАЛА( ) );	Продолжать			= true;	ВсегоДокументов		= 0;	ПОКА ( Продолжать )	{		IF ( !ПУСТО( ИДСобытия ) )			ТекстЗапроса	= ПЕРЕКОДИРОВАТЬ( "{""jsonrpc"": ""2.0"",""method"": ""СБИС.СписокИзменений"",""params"": {""Фильтр"": {""ИдентификаторСобытия"": """ + ИДСобытия + """,""ПолныйСертификатЭП"": ""Нет""}},""id"": 0 }", "ANSI", "UTF-8" );		ELSE			ТекстЗапроса	= ПЕРЕКОДИРОВАТЬ( "{""jsonrpc"": ""2.0"",""method"": ""СБИС.СписокИзменений"",""params"": {""Фильтр"": {""ДатаВремяС"": """ + TTOC( ДАТАЗАГРУЗКИ ) + """,""ПолныйСертификатЭП"": ""Нет""}},""id"": 0 }", "ANSI", "UTF-8" );					Ответ				= HTTPPOST( Соединение, "service/?srv=1", ТекстЗапроса, "Заголовки" );		IF ( !ЭДО.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );				ЗАГРУЗИТЬJSON( "Результат", ПЕРЕКОДИРОВАТЬ( ПОЛЕ_JSON( Ответ, "result", "" ), "UTF-8", "ANSI" ), "Результат" );		ЗАГРУЗИТЬJSON( "СписокДокументов", ЗНАЧЕНИЕПОЛЯ( "Результат", "Документ", "" ), "Текст" );						ВсегоДокументов		+= КОЛИЧЕСТВОСТРОК( "СписокДокументов" );		ПЕРЕЙТИВНАЧАЛО( "СписокДокументов" );		ПОКА( !КОНЕЦКОНТЕКСТА( "СписокДокументов" ) )		{			ЗАГРУЗИТЬJSON( "Документ", ЗНАЧЕНИЕПОЛЯ( "СписокДокументов", "Текст", "" ) );			ИДДокумента		= ЗНАЧЕНИЕПОЛЯ( "Документ", "Идентификатор", "" );			РедакцияДок		= ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Документ", "Редакция", "" ), 0, "" );			СостояниеДок	= VAL( ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Документ", "Состояние", "" ), "Код", "" ) );			Входящий		= UPPER( ALLTRIM( ЗНАЧЕНИЕПОЛЯ( "Документ", "Направление", "" ) ) )== "ВХОДЯЩИЙ";			IF ( !Входящий || ПОЛЕ_JSON( РедакцияДок, "Актулен", "" ) == "Нет" || СостояниеДок == 7 || СостояниеДок == 9 )			{				IF ( !Входящий )				{					// Для исходящего документа проверяем статус					СтатусДокумента	= ЕСЛИ( СостояниеДок <= 4, 1, ЕСЛИ( СостояниеДок == 6, 4, 									  ЕСЛИ( СостояниеДок == 7, 2, ЕСЛИ( СостояниеДок == 9, 3, 5 ) ) ) );					// Если все прошло без ошибок, то ставим статус отправки					ЗАПРОС( "IF EXISTS( SELECT * FROM edioutcome WHERE guid= '" + STDF( ИДДокумента ) + "' ) 							 UPDATE edioutcome SET status = " + СтатусДокумента + " WHERE guid= '" + STDF( ИДДокумента ) + "'" );				}								// Необходимо пройти все события, чтобы найти ИД последнего				ЗАГРУЗИТЬJSON( "События", ЗНАЧЕНИЕПОЛЯ( "Документ", "Событие", "" ), "Текст" );				ПЕРЕЙТИВНАЧАЛО( "События" );				ПОКА( !КОНЕЦКОНТЕКСТА( "События" ) )				{					ИДСобытия	= ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "События", "Текст", "" ), "Идентификатор", "" );					ПРОПУСТИТЬ( 1, "События" );				}				УДАЛИТЬКОНТЕКСТ( "События" );				ПРОПУСТИТЬ( 1, "СписокДокументов" );				CONTINUE;			}			ИДРедакции		= ПОЛЕ_JSON( РедакцияДок, "Идентификатор", "" );			ЗАГРУЗИТЬJSON( "События", ЗНАЧЕНИЕПОЛЯ( "Документ", "Событие", "" ), "Текст" );			ПЕРЕЙТИВНАЧАЛО( "События" );			ПОКА( !КОНЕЦКОНТЕКСТА( "События" ) )			{								ИДСобытия	= ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "События", "Текст", "" ), "Идентификатор", "" );				// Для входящих документов проверяем вложения. Ищем типы УпдСчфДоп и УпдДоп				IF ( Входящий )				{					ЗАГРУЗИТЬJSON( "Вложения", ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "События", "Текст", "" ), "Вложение", "" ), "Текст" );										ПЕРЕЙТИВНАЧАЛО( "Вложения" );					ПОКА( !КОНЕЦКОНТЕКСТА( "Вложения" ) )					{						ЗАГРУЗИТЬJSON( "Вложение", ЗНАЧЕНИЕПОЛЯ( "Вложения", "Текст", "" ) );						Ссылка		= "";//ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Вложение", "Файл", "" ), "Ссылка", "" );						ЗАПРОС( "INSERT INTO " + ИмяТаблицыИД + " ( id, edition, uri ) 								 VALUES ( '" + STDF( ИДДокумента ) + "', '" + STDF( ИДРедакции ) + "', '" + STDF( Ссылка ) + "' )" );						ПРОПУСТИТЬ( 1, "Вложения" );					}					УДАЛИТЬКОНТЕКСТ( "Вложения" );				}												ПРОПУСТИТЬ( 1, "События" );			}			УДАЛИТЬКОНТЕКСТ( "События" );						ПРОПУСТИТЬ( 1, "СписокДокументов" );		}		УДАЛИТЬКОНТЕКСТ( "СписокДокументов" );		Продолжать			= ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Результат", "Навигация", "" ), "ЕстьЕще", "Нет" ) == "Да" && !ПУСТО( ИДСобытия );		УДАЛИТЬКОНТЕКСТ( "Результат" );				СИСТЕМНОЕСООБЩЕНИЕ( "Найдено " + STR( ВсегоДокументов ) + " записей журнала документов." );	}		СИСТЕМНОЕСООБЩЕНИЕ( );	IF ( !ДОБАВИТЬКОНТЕКСТ( "SELECT DISTINCT id, edition FROM " + ИмяТаблицыИД, "Загрузка" ) ) RETURN false;	ИНДИКАТОР( "Создание документов", КОЛИЧЕСТВОСТРОК( "Загрузка" ) );	ВсегоДокументов			= 0;//КОЛИЧЕСТВОСТРОК( "Загрузка" );	НомерДокумента			= 1;	// Проходим по полученному списку документов и загружаем сами документы	ПЕРЕЙТИВНАЧАЛО( "Загрузка" );	ПОКА ( !КОНЕЦКОНТЕКСТА( "Загрузка" ) )	{		ИНДИКАТОР( НомерДокумента, "Обработано документов " + STR( НомерДокумента ) + " из " + STR( КОЛИЧЕСТВОСТРОК( "Загрузка" ) ) );		НомерДокумента++;				ТекстЗапроса		= ПЕРЕКОДИРОВАТЬ( "{""jsonrpc"": ""2.0"", ""method"": ""СБИС.ПрочитатьДокумент"", ""params"": { ""Документ"": { ""Идентификатор"": """ + Загрузка.id + """ }},""id"": 0}", "ANSI", "UTF-8" );		Ответ				= HTTPPOST( Соединение, "service/?srv=1", ТекстЗапроса, "Заголовки" );		IF ( !ЭДО.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );		// Теперь необходимо найти нужное вложение		ЗАГРУЗИТЬJSON( "Результат", ПЕРЕКОДИРОВАТЬ( ПОЛЕ_JSON( Ответ, "result", "" ), "UTF-8", "ANSI" ), "Результат" );		ЗАГРУЗИТЬJSON( "Вложения", ЗНАЧЕНИЕПОЛЯ( "Результат", "Вложение", "" ), "Текст" );						КоличествоВложений	= 0;		XMLТекстДокумента	= "";		ПЕРЕЙТИВНАЧАЛО( "Вложения" );		ПОКА( !КОНЕЦКОНТЕКСТА( "Вложения" ) )		{			ЗАГРУЗИТЬJSON( "Вложение", ЗНАЧЕНИЕПОЛЯ( "Вложения", "Текст", "" ) );			ТипВложения		= UPPER( СЖАТЬПРОБЕЛЫ( ЗНАЧЕНИЕПОЛЯ( "Вложение", "Тип", "" ) ) );			Ссылка			= ЭДО.URLDECODING( ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Вложение", "Файл", "" ), "Ссылка", "" ) );			ТИПДОКУМЕНТА	= "";			IF ( !ПУСТО( Ссылка ) )			{				Ссылка			= ПОДСТРОКА( Ссылка, ATC( Ссылка, "/", 3 ) + 1 );				Ответ			= HTTPGET( Соединение, Ссылка, "ЗаголовкиДок", false, "B" );				IF ( _RESPONSECODE != 200 )				{					ОтветТекст	= СТРОКАИЗМАССИВА( Ответ );					IF ( !ЭДО.СБИСПРОВЕРКАНАОШИБКИ( @ОтветТекст ) ) THROW ( ОтветТекст );				}				// Если тип вложения разбираемый XML файл, то формируем входящий документ и прикрепляем к нему остальные вложения				ВложениеГлавное[ КоличествоВложений ]	= false;				IF ( ВСПИСКЕ( ТипВложения, "АКТВР", "АКТПП", "СЧФКТР", "УПДДОП", "УПДСЧФДОП", "ЭДОНАКЛ", "ЭДОСЧ", "ЗАКАЗ" ) )				{					XMLТекстДокумента	= СТРОКАИЗМАССИВА( Ответ );					ТИПДОКУМЕНТА		= ЕСЛИ( ВСПИСКЕ( ТипВложения, "АКТВР", "АКТПП" ), "049", 										  ЕСЛИ( ВСПИСКЕ( ТипВложения, "СЧФКТР", "УПДДОП", "УПДСЧФДОП", "ЭДОНАКЛ" ), "001", 										  ЕСЛИ( ВСПИСКЕ( ТипВложения, "ЭДОСЧ" ), "032", 										  ЕСЛИ( ВСПИСКЕ( ТипВложения, "ЗАКАЗ" ), "020", "" ) ) ) );					ВложениеГлавное[ КоличествоВложений ]	= true;				}				// Все вложения загружаем в память, для того, чтобы потом прикрепить к документу				ВложенияСодержимое[ КоличествоВложений ]	= Ответ;				ВложенияФайл[ КоличествоВложений ]			= ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Вложение", "Файл", "" ), "Имя", "" );				ВложенияВнешние[ КоличествоВложений ]		= !ПУСТО( ТИПДОКУМЕНТА ) OR ПУСТО( ТИПВЛОЖЕНИЯ );				ВложенияИД[ КоличествоВложений ]			= ЗНАЧЕНИЕПОЛЯ( "Вложение", "Идентификатор", "" );				КоличествоВложений++;			}			ПРОПУСТИТЬ( 1, "Вложения" );		}		// Если быд найден XML текст документа и определен фильтр на входящие документы, то проверяем. подходит ли нам документ		IF ( !ПУСТО( XMLТекстДокумента ) && !ПУСТО( СКРИПТПРОВЕРКИ ) )		{			// Формируем список переменных для проверки документа на удовлетворение фильтру			РАЗОБРАТЬ_XML( Ответ, "ЭДО.DocFlowINVars_РазобратьТэги" );			Проверка	= ВЫЧИСЛИТЬ( СКРИПТПРОВЕРКИ );			IF ( ТИП( "Проверка" ) == "L" && ПУСТО( Проверка ) )			{				ПропущеноДокументов++;				ПРОПУСТИТЬ( 1, "Вложения" );				CONTINUE;			}		}				// Создаем документ из полученного файла		ДокументИзМаркировки		= false;		IF ( !ПУСТО( XMLТекстДокумента ) )		{/*			// Создаем документ из полученного файла			// Если в файле есть маркировка, то создаем в модуле маркировки			IF ( ATC( XMLТекстДокумента, "<РљРР—" ) > 0 || ATC( XMLТекстДокумента, "<КИЗ" ) > 0 || 				 ATC( XMLТекстДокумента, "<НомУпак" ) > 0 || ATC( XMLТекстДокумента, "<РќРѕРјРЈРїР°Рє" ) > 0 || 				 ATC( XMLТекстДокумента, "<ИдентТрансУпак" ) > 0 || ATC( XMLТекстДокумента, "<РРґРµРЅС‚РўСЂР°РЅСЃРЈРїР°Рє" ) > 0 )			{				СозданиеДокумента	= Маркировка.СоздатьДокументИЗXML( Предприятие, Загрузка.id, Загрузка.edition, XMLТекстДокумента );				ДокументИзМаркировки= true;			}			ELSE*/				СозданиеДокумента	= ЭДО.СоздатьДокументИЗXML( Предприятие, Загрузка.id, Загрузка.edition, XMLТекстДокумента, false, ТИПДОКУМЕНТА, ТипВложения );		}		ELSE		{			// ПРЕДПРИЯТИЕ, GUIDДОКУМЕНТА, GUIDРЕДАКЦИИ, АДРЕСКЛИЕНТА, ИННКЛИЕНТА, КППКЛИЕНТА, НАЗВАНИЕКЛИЕНТА, НАЗВАНИЕДОКУМЕНТА, НОМЕРДОКУМЕНТА, ДАТАДОКУМЕНТА, ВЫВЕСТИСООБЩЕНИЕ			ЗАГРУЗИТЬJSON( "Контрагент", ЗНАЧЕНИЕПОЛЯ( "Результат", "Контрагент", "" ), "Текст" );			IF ( ПУСТО( ЗНАЧЕНИЕПОЛЯ( "Контрагент", "СвЮл", "" ) ) )				ЗАГРУЗИТЬJSON( "Контрагент", ЗНАЧЕНИЕПОЛЯ( "Контрагент", "СвИП", "" ), "Текст" );			ELSE				ЗАГРУЗИТЬJSON( "Контрагент", ЗНАЧЕНИЕПОЛЯ( "Контрагент", "СвЮл", "" ), "Текст" );			СозданиеДокумента	= ЭДО.СоздатьПустойДокумент( Предприятие, Загрузка.id, Загрузка.edition, 															ЗНАЧЕНИЕПОЛЯ( "Контрагент", "АдресЮридический", "" ),															ЗНАЧЕНИЕПОЛЯ( "Контрагент", "ИНН", "" ), ЗНАЧЕНИЕПОЛЯ( "Контрагент", "КПП", "" ),															ЗНАЧЕНИЕПОЛЯ( "Контрагент", "Название", "" ), ЗНАЧЕНИЕПОЛЯ( "Результат", "Название", "" ),															ЗНАЧЕНИЕПОЛЯ( "Результат", "Номер", "" ), 															CTOD( ЗНАЧЕНИЕПОЛЯ( "Результат", "Дата", "" ) ), false );		}		IF ( ПУСТО( СозданиеДокумента ) ) THROW( "Ошибка загрузки данных из ЭДО." );		// Прикрепляем к документу вложения				IF ( !ДокументИзМаркировки )		{			ИДДокументаВх				= ЗАПРОС ( "SELECT rid FROM ediincome													WHERE guid = '" + STDF( Загрузка.id ) + "' AND ent = '" + STDF( Предприятие ) + "' AND 														  editionguid = '" + STDF( Загрузка.edition ) + "'" );			__SQL( ) 			{				DELETE FROM edi_attach WHERE owner = '[[ ИДДокументаВх ]]';			};			FOR ( НомерВложения = 0; НомерВложения < КоличествоВложений; НомерВложения++ )			{				IF ( !ВложенияВнешние[ НомерВложения ] )					ЭДО.СБИСЗаписатьСвязанныйДокумент( ПРЕДПРИЯТИЕ, Загрузка.id, Загрузка.edition, ВложенияИД[ НомерВложения ], "", "", "", "", 													   СТРОКАИЗМАССИВА( ВложенияСодержимое[ НомерВложения ] ), true, ВложенияФайл[ НомерВложения ], ВложениеГлавное[ НомерВложения ] );				ELSE					__SQL( )					{						INSERT INTO edi_attach ( owner, filename, filecontent ) 						VALUES ( '[[ ИДДокументаВх ]]', '[[ ВложенияФайл[ НомерВложения ] ]]', [[ СТРОКА( ВложенияСодержимое[ НомерВложения ] ) ]] );					};			}						НРДата				= ЗАПРОС( "SELECT date FROM ediincome WHERE rid= '" + STDF( ИДДокументаВх ) + "'" );			// Для формы модуля ЭДО проверяем период 			IF ( НРДата < FORMDATE_MIN )				FORMDATE_MIN	= НРДата;			ELSE IF ( НРДата > FORMDATE_MIN )				FORMDATE_MAX	= НРДата;						// Пробуем определить ИД ЭДО контрагента			КонтрагентКод		= ЗАПРОС( "SELECT client FROM ediincome WHERE rid= '" + ИДДокументаВх + "'" );			IF ( !ПУСТО( КонтрагентКод ) )			{				КонтрагентИНН		= ЗАПРОС( "SELECT inn, kpp FROM sprclient WHERE code= '" + КонтрагентКод + "'", "inn" );				КонтрагентКПП		= ЗАПРОС( "", "kpp" );				ТекстЗапроса		= "";				IF ( ДЛИНА( КонтрагентИНН ) == 10 && ДЛИНА( КонтрагентКПП ) == 9 )					ТекстЗапроса	= ПЕРЕКОДИРОВАТЬ( "{""jsonrpc"": ""2.0"", ""method"": ""СБИС.ИнформацияОКонтрагенте"", "+													  """params"": { ""Участник"": { ""СвЮЛ"": { ""ИНН"": """ + КонтрагентИНН + """, ""КПП"": """ + КонтрагентКПП + """ }}},""id"": 0}", "ANSI", "UTF-8" );				ELSE IF ( ДЛИНА( КонтрагентИНН ) == 12 )					ТекстЗапроса	= ПЕРЕКОДИРОВАТЬ( "{""jsonrpc"": ""2.0"", ""method"": ""СБИС.ИнформацияОКонтрагенте"", "+													  """params"": { ""Участник"": { ""СвФЛ"": { ""ИНН"": """ + КонтрагентИНН + """ }}},""id"": 0}", "ANSI", "UTF-8" );				IF ( !ПУСТО( ТекстЗапроса ) )				{					Ответ				= HTTPPOST( Соединение, "service/?srv=1", ТекстЗапроса, "Заголовки" );					IF ( ЭДО.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) )					{						КонтрагентЭДОИД	= ПОЛЕ_JSON( ПОЛЕ_JSON( ПЕРЕКОДИРОВАТЬ( Ответ, "UTF-8", "ANSI" ), "result", "" ), "Идентификатор", "" );						ЗАПРОС( "UPDATE ediincome SET cediid= '" + STDF( КонтрагентЭДОИД ) + "' WHERE rid= '" + ИДДокументаВх + "'" );						ЗАПРОС( "UPDATE sprclient SET ediid=  '" + STDF( КонтрагентЭДОИД ) + "' WHERE code= '" + КонтрагентКод + "' AND ediid  = ''" );						ЗАПРОС( "UPDATE sprclient SET ediid2= '" + STDF( КонтрагентЭДОИД ) + "' WHERE code= '" + КонтрагентКод + "' AND ediid2 = '' AND ediid <> '" + STDF( КонтрагентЭДОИД ) + "' " );					}				}			}		}				ELSE		{			МРКНомер			= ЗАПРОС( "SELECT ndok, date FROM mark_in WHERE guid= '" + STDF( Загрузка.id ) + "'", "ndok" );			МРКНРДата			= ЗАПРОС( "", "date" );			ПереданоВМаркировку	+= CHR( 13 ) + МРКНомер + " от " + DTOC( МРКНРДата );		}		FOR ( НомерВложения = 0; НомерВложения < КоличествоВложений; НомерВложения++ )		{			ВложенияФайл[ НомерВложения ]		= "";			ВложенияСодержимое[ НомерВложения ]	= "";			ВложенияИД[ НомерВложения ]			= "";		}					IF ( СозданиеДокумента == "ЕСТЬНОВАЯРЕДАКЦИЯ" )		{			НРНомер				= ЗАПРОС( "SELECT ndok, date FROM " + ЕСЛИ( ДокументИзМаркировки, "mark_in", "ediincome" ) + " WHERE guid= '" + STDF( Загрузка.id ) + "'", "ndok" );			НРДата				= ЗАПРОС( "", "date" );			НоваяРедакция		+= CHR( 13 ) + ЕСЛИ( ДокументИзМаркировки, "МАРКИРОВКА:", "" ) + НРНомер + " от " + DTOC( НРДата );		}		ELSE IF ( СозданиеДокумента != "ДОКУМЕНТУЖЕЕСТЬ" ) 			ВсегоДокументов++;				УДАЛИТЬКОНТЕКСТ( "Вложения" );		УДАЛИТЬКОНТЕКСТ( "Результат" );				ПРОПУСТИТЬ( 1, "Загрузка" );	}	ИНДИКАТОР( );		ЭДО.СБИСПроверкаСтатусаОтгрузок( ПРЕДПРИЯТИЕ );	// Обновляем дату загрузки	ЗАПРОС( "DELETE FROM param_ex WHERE param= 'EDI_EDIDOWNLOADDATE" + ПРЕДПРИЯТИЕ + "'" );	ЗАПРОС( "INSERT INTO param_ex ( param, value ) VALUES ( 'EDI_EDIDOWNLOADDATE" + ПРЕДПРИЯТИЕ + "', '" + DTOC( ДАТА( ) ) + "' )" );		ИтоговоеСообщение		= "";	// Сообщаем о завершении загрузки	IF ( ВсегоДокументов == 0 )		ИтоговоеСообщение	= "Новые документы не найдены.";	ELSE		ИтоговоеСообщение	= "Успешно загружен(о) " + ПРОПИСЬ( ВсегоДокументов, "документ", "документа", "документов" );		IF ( !ПУСТО( НоваяРедакция ) )		ИтоговоеСообщение	+= CHR( 13 ) + CHR( 13 ) + "Для следующих документов найдены новые редакции:" + НоваяРедакция;		IF ( !ПУСТО( ПереданоВМаркировку ) )		ИтоговоеСообщение	+= CHR( 13 ) + CHR( 13 ) + "Следующие документы переданы в модуль Маркировка:" + ПереданоВМаркировку;	IF ( ПропущеноДокументов > 0 )		ИтоговоеСообщение	+= CHR( 13 ) + CHR( 13 ) + "Не загружен(о) " + ПРОПИСЬ( ПропущеноДокументов, "документ", "документа", "документов" ) + " т.к. не удовлетворяет фильтру на документы";	СООБЩЕНИЕ( ИтоговоеСообщение );	УДАЛИТЬКОНТЕКСТ( "Загрузка" );}catch ( ТекстСообщения ){	СИСТЕМНОЕСООБЩЕНИЕ( );	ИНДИКАТОР( );	HTTPCLOSE( Соединение );	СООБЩЕНИЕ( ТекстСообщения );	УДАЛИТЬКОНТЕКСТ( "Загрузка" );	RETURN false;}ИНДИКАТОР( );HTTPCLOSE( Соединение );RETURN true;
