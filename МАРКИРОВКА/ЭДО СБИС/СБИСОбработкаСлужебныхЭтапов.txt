СЕРТИФИКАТ				= ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_CERTIFICATE" + ПРЕДПРИЯТИЕ + "'" );ПОДПИСАНТИМЯ			= ЗАМЕНИТЬ( ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDIFIRSTNAME" + ПРЕДПРИЯТИЕ + "'" ), " ", "_" );ПОДПИСАНТФАМИЛИЯ		= ЗАМЕНИТЬ( ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDISURNAME" + ПРЕДПРИЯТИЕ + "'" ), " ", "_" );ПОДПИСАНТОТЧЕСТВО		= ЗАМЕНИТЬ( ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDIMIDDLENAME" + ПРЕДПРИЯТИЕ + "'" ), " ", "_" );ДОЛЖНОСТЬ				= ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDIPOSITION" + ПРЕДПРИЯТИЕ + "'" );ФИОJSON					= ДАННЫЕ_JSON( "ФИО", ПОДПИСАНТФАМИЛИЯ + " " + ПОДПИСАНТИМЯ + " " + ПОДПИСАНТОТЧЕСТВО );ДОЛЖНОСТЬJSON			= ДАННЫЕ_JSON( "Должность", ДОЛЖНОСТЬ );ИННJSON					= ДАННЫЕ_JSON( "ИНН", ЗАПРОС( "SELECT inn FROM sprfirm WHERE code IN ( SELECT CONVERT( varchar( 10 ), value ) FROM param_ex WHERE param= 'MARK_FIRM" + ПРЕДПРИЯТИЕ + "')" ) );ОТПЕЧАТОКJSON			= ДАННЫЕ_JSON( "Отпечаток", Маркировка.СертификатОтпечаток( СЕРТИФИКАТ ) );СБИСТОКЕН				= Маркировка.СБИСАвторизация( ПРЕДПРИЯТИЕ );IF ( ПУСТО( СБИСТОКЕН ) ) RETURN -1;АдресСервера 			= Маркировка.СБИСАдресСервера( false );;Заголовки[ 0 ]			= "Content-Type: application/json-rpc;charset=utf-8";Заголовки[ 1 ]			= "X-SBISSessionID: " + СБИСТОКЕН;ЗаголовкиДок[ 0 ]		= "X-SBISSessionID: " + СБИСТОКЕН;КоличествоЭтапов		= 0;try{	ТекстОшибки			= "Сервер " + АдресСервера + CHR( 13 ) + "вернул сообщение об ошибке: " + CHR( 13 );	Соединение 			= HTTPCONNECT( АдресСервера, "", true, Маркировка.ФАЙЛЖУРНАЛА( ) );	ТекстЗапроса		= ПЕРЕКОДИРОВАТЬ( '{"jsonrpc": "2.0","method": "СБИС.СписокСлужебныхЭтапов","params": {"Фильтр": {"ИдентификаторДокумента": "' + ИДДокумента + '" } }, "id": 0 }', "ANSI", "UTF-8" );	Ответ				= HTTPPOST( Соединение, "service/?srv=1", ТекстЗапроса, "Заголовки" );	IF ( !МАРКИРОВКА.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );		ЗАГРУЗИТЬJSON( "Результат", ПЕРЕКОДИРОВАТЬ( ПОЛЕ_JSON( Ответ, "result", "" ), "UTF-8", "ANSI" ), "Результат" );	ЗАГРУЗИТЬJSON( "СписокЭтапов", ЗНАЧЕНИЕПОЛЯ( "Результат", "Документ", "" ), "Текст" );	ПОКА ( !КОНЕЦКОНТЕКСТА( "СписокЭтапов" ) ) 	{		Этап			= ПОЛЕ_JSON( ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "СписокЭтапов", "Текст", "" ), "Этап", "" ), 0, "" );		Действие		= ПОЛЕ_JSON( ПОЛЕ_JSON( Этап, "Действие", "" ), 0, "" );		ИДЭтапа			= ПОЛЕ_JSON( Этап, "Идентификатор", "" );		НазваниеЭтапа	= ПОЛЕ_JSON( Этап, "Название", "" );		Название		= ПОЛЕ_JSON( Действие, "Название", "" );				ТекстЗапроса	= ПЕРЕКОДИРОВАТЬ( '{"jsonrpc": "2.0","method": "СБИС.ПодготовитьДействие","params": {"Документ": {"Идентификатор": "' + ИДДокумента + '",'+										  '"Этап": {"Идентификатор":"' + ИДЭтапа + '", "Действие": { "Название": "' + Название + '", ' + 										  '"Сертификат": { ' + ФИОJSON + ', ' + ДолжностьJSON + ', ' + ИННJSON + ', ' + ОТПЕЧАТОКJSON + ' } } } } }, "id": 0 }', "ANSI", "UTF-8" );		Ответ			= HTTPPOST( Соединение, "service/?srv=1", ТекстЗапроса, "Заголовки" );		IF ( !МАРКИРОВКА.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );		// В ответе подготовленные данные, которые необходимо зашифровать и отправить		// Необходимо пройти по вложениям и подписать их ЭЦП		Вложения		= "";		ЗАГРУЗИТЬJSON( "Результат", ПЕРЕКОДИРОВАТЬ( ПОЛЕ_JSON( Ответ, "result", "" ), "UTF-8", "ANSI" ), "Результат" );		ЗАГРУЗИТЬJSON( "ЭтапыКВыполнению", ЗНАЧЕНИЕПОЛЯ( "Результат", "Этап", "" ), "Текст" );		ПОКА ( !КОНЕЦКОНТЕКСТА( "ЭтапыКВыполнению" ) ) 		{			ЗАГРУЗИТЬJSON( "Вложения", ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "ЭтапыКВыполнению", "Текст", "" ), "Вложение", "" ), "Текст" );			ПОКА ( !КОНЕЦКОНТЕКСТА( "Вложения" ) ) 			{				Вложение		= ЗНАЧЕНИЕПОЛЯ( "Вложения", "Текст" );				ИДВложения		= ПОЛЕ_JSON( Вложение, "Идентификатор", "" );				Файл			= ПОЛЕ_JSON( Вложение, "Файл", "" );				ФайлИмя			= ПОЛЕ_JSON( Файл, "Имя", "" );				ФайлСсылка		= ПОЛЕ_JSON( Файл, "Ссылка", "" );								Ссылка			= МАРКИРОВКА.URLDECODING( ПОЛЕ_JSON( Файл, "Ссылка", "" ) );				IF ( !ПУСТО( Ссылка ) )				{					Ссылка			= ПОДСТРОКА( Ссылка, ATC( Ссылка, "/", 3 ) + 1 );					Ответ			= HTTPGET( Соединение, Ссылка, "ЗаголовкиДок", "B" );					IF ( !МАРКИРОВКА.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( STR( _RESPONSECODE ) + " " + Ответ + CHR( 13 ) + Ссылка );					// Записываем подчиненный файл в базу					МАРКИРОВКА.СБИСЗаписатьСвязанныйДокумент( ПРЕДПРИЯТИЕ, ИДДокумента, ИДРедакции, ИДЭтапа, ДОЛЖНОСТЬ, ПОДПИСАНТФАМИЛИЯ, ПОДПИСАНТИМЯ, ПОДПИСАНТОТЧЕСТВО, Ответ );										ШифрованныйХэш	= ПЕРЕКОДИРОВАТЬ( ШИФРОВАНИЕ( СЕРТИФИКАТ, Ответ, 1, false, false, _МАРКИРОВКА_ХРАНИЛИЩЕСЕРТИФИКАТОВ ), "", "BASE64" );					// Формируем текст объекта Файл					Файл			= "{" + ДАННЫЕ_JSON( "Имя", ФайлИмя ) + ","+											ДАННЫЕ_JSON( "Ссылка", ФайлСсылка ) + "}"; 																// Формируем текст объекта Файл					Подпись			= "{ ""Файл"":{" + ДАННЫЕ_JSON( "Имя", ФайлИмя + ".sgn" ) + ","+													   ДАННЫЕ_JSON( "ДвоичныеДанные", ШифрованныйХэш ) + "}}"; 					// Формируем текст объекта Вложение					Вложение		= "{" + ДАННЫЕ_JSON( "Идентификатор", ИДВложения ) + ","+									  """Файл"": " + Файл + ","+									  """Подпись"": [" + Подпись + "] }";									  					Вложения		+= ЕСЛИ( !ПУСТО( Вложения ), ",", "" ) + Вложение;				}				ПРОПУСТИТЬ( 1, "Вложения" );			}			УДАЛИТЬКОНТЕКСТ( "Вложения" );						ПРОПУСТИТЬ( 1, "ЭтапыКВыполнению" );		}		УДАЛИТЬКОНТЕКСТ( "ЭтапыКВыполнению" );				Вложения		= """Вложение"":[" + Вложения + "]";		ТекстЗапроса	= '{"jsonrpc": "2.0","method": "СБИС.ВыполнитьДействие","params": {"Документ": {"Идентификатор": "' + ИДДокумента + '",'+						  '"Этап": {"Идентификатор":"' + ИДЭтапа + '", "Действие": { "Название": "' + Название + '", ' + 						  '"Сертификат": { ' + ФИОJSON + ', ' + ДолжностьJSON + ', ' + ИННJSON + ', ' + ОТПЕЧАТОКJSON + ', "Ключ":{ "Тип":"Клиентский"} } }, ' + Вложения + ' } } }, "id": 0 }';		Ответ			= HTTPPOST( Соединение, "service/?srv=1", ПЕРЕКОДИРОВАТЬ( ТекстЗапроса, "ANSI", "UTF-8" ), "Заголовки" );		IF ( !МАРКИРОВКА.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );		ПРОПУСТИТЬ( 1, "СписокЭтапов" );		// Результат показывает количество подписанных этапов обрбаотки документа		КоличествоЭтапов++;	}	УДАЛИТЬКОНТЕКСТ( "СписокЭтапов" );	УДАЛИТЬКОНТЕКСТ( "Результат" );}catch ( ТекстСообщения ){	СИСТЕМНОЕСООБЩЕНИЕ( );	HTTPCLOSE( Соединение );	СООБЩЕНИЕ( ТекстСообщения );	RETURN -1;}HTTPCLOSE( Соединение );RETURN КоличествоЭтапов;
