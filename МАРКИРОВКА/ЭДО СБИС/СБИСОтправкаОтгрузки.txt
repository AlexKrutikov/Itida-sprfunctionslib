ФУНКЦИЯ СБИССведения( ИНН, КПП, Наименование, Имя, Фамилия, Отчество ){	ИНН_JSON			= ДАННЫЕ_JSON( "ИНН", ИНН );	КПП_JSON			= ЕСЛИ( !ПУСТО( КПП ), ДАННЫЕ_JSON( "КПП", КПП ), "" );	Наименование_JSON	= ЕСЛИ( !ПУСТО( Наименование ), "," + ДАННЫЕ_JSON( "Название", Наименование ), "" );	Фамилия_JSON		= ДАННЫЕ_JSON( "Фамилия", Фамилия );	Имя_JSON			= ДАННЫЕ_JSON( "Имя", Имя );	Отчество_JSON		= ДАННЫЕ_JSON( "Отчество", Отчество );	IF ( ДЛИНА( ИНН ) == 12 )		Текст			= "{""СвФЛ"": { " + ИНН_JSON + ", " + Фамилия_JSON + ", " + Имя_JSON + ", " + Отчество_JSON + " } }";	ELSE		Текст			= "{""СвЮЛ"": { " + ИНН_JSON + ", " + КПП_JSON + Наименование_JSON + " } }";		RETURN Текст;}СЕРТИФИКАТ				= ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_CERTIFICATE" + ПРЕДПРИЯТИЕ + "'" );Фирма					= ЗАПРОС( "SELECT code FROM sprfirm WHERE code IN ( SELECT CONVERT( varchar( 10 ), value ) FROM param_ex WHERE param= 'MARK_FIRM" + ПРЕДПРИЯТИЕ + "')" );ПОДПИСАНТИМЯ			= ЗАМЕНИТЬ( ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDIFIRSTNAME" + ПРЕДПРИЯТИЕ + "'" ), " ", "_" );ПОДПИСАНТФАМИЛИЯ		= ЗАМЕНИТЬ( ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDISURNAME" + ПРЕДПРИЯТИЕ + "'" ), " ", "_" );ПОДПИСАНТОТЧЕСТВО		= ЗАМЕНИТЬ( ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDIMIDDLENAME" + ПРЕДПРИЯТИЕ + "'" ), " ", "_" );ДОЛЖНОСТЬ				= ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDIPOSITION" + ПРЕДПРИЯТИЕ + "'" );ФИОJSON					= ДАННЫЕ_JSON( "ФИО", ПОДПИСАНТФАМИЛИЯ + " " + ПОДПИСАНТИМЯ + " " + ПОДПИСАНТОТЧЕСТВО );ДОЛЖНОСТЬJSON			= ДАННЫЕ_JSON( "Должность", ДОЛЖНОСТЬ );ИННJSON					= ДАННЫЕ_JSON( "ИНН", ЗАПРОС( "SELECT inn FROM sprfirm WHERE code = '" + Фирма + "'" ) );ОТПЕЧАТОКJSON			= ДАННЫЕ_JSON( "Отпечаток", Маркировка.СертификатОтпечаток( СЕРТИФИКАТ ) );// Фирма в документе должна совпадать с фирмой в настройкахИДДокумента				= ЗАПРОС( "SELECT ic FROM mark_out WHERE guid = '" + GUIDДокумента + "'" );IF ( Фирма != ЗАПРОС( "SELECT firm FROM spr002 WHERE identity_column = " + ИДДокумента ) ){	НазваниеДокумента	= ЗАПРОС( "SELECT '№ ' + RTRIM( ndok ) + ' от ' + CONVERT( varchar( 20 ), date, 104 ) FROM spr002 WHERE identity_column = " + ИДДокумента );	СООБЩЕНИЕ( "Фирма в документе Расходная накладная " + НазваниеДокумента + CHR( 13 ) + 			   "не совпадает с фирмой в настройках модуля Маркировка." + CHR( 13 ) + 			   "Документ не был отправлен в систему ЭДО." );	RETURN false;}// Формируем XML файл для отправки в ЭДОИмяФайла				= Маркировка.СоздатьXMLИзДокумента( ПРЕДПРИЯТИЕ, GUIDДокумента );IF ( ПУСТО( ИмяФайла ) || !МАРКИРОВКА.ПрочитатьУПД( GUIDДокумента ) ) RETURN false;// Читаем сформированное содержимое и удаляем файлДокументXML				= ФАЙЛПРОЧИТАТЬ( ИмяФайла, "S", -1 );ФАЙЛУДАЛИТЬ( ИмяФайла );ИмяФайла				= ПОДСТРОКА( ИмяФайла, RAT( ИмяФайла, "\" ) + 1 );СБИСТОКЕН				= Маркировка.СБИСАвторизация( ПРЕДПРИЯТИЕ );IF ( ПУСТО( СБИСТОКЕН ) ) RETURN false;АдресСервера 			= Маркировка.СБИСАдресСервера( false );;Заголовки[ 0 ]			= "Content-Type: application/json-rpc;charset=utf-8";Заголовки[ 1 ]			= "X-SBISSessionID: " + СБИСТОКЕН;ЗаголовкиДок[ 0 ]		= "X-SBISSessionID: " + СБИСТОКЕН;try{	ТекстОшибки			= "Сервер " + АдресСервера + CHR( 13 ) + "вернул сообщение об ошибке: " + CHR( 13 );	Соединение 			= HTTPCONNECT( АдресСервера, "", true, Маркировка.ФАЙЛЖУРНАЛА( ) );	// Необходимо отправить команду ЗаписатьДокумент 	// Для этого создает объект Документ	ИДВложения_JSON		= ДАННЫЕ_JSON( "Идентификатор", ЗАПРОС( "SELECT NEWID( )" ) );	ИмяФайла_JSON		= ДАННЫЕ_JSON( "Имя", ИмяФайла );	ДвоичныеДанные_JSON	= ДАННЫЕ_JSON( "ДвоичныеДанные", ПЕРЕКОДИРОВАТЬ( ДокументXML, "UTF-8", "BASE64" ) ); 	Вложение			= """Вложение"":[{" + ИДВложения_JSON + ",""Файл"": { " + ДвоичныеДанные_JSON + ", " + ИмяФайла_JSON + "}}]";	Дата_JSON			= ДАННЫЕ_JSON( "Дата", DTOC( Документ.date, 4 ) );	Номер_JSON			= ДАННЫЕ_JSON( "Номер", Документ.ndok );	Сумма_JSON			= ДАННЫЕ_JSON( "Сумма", СТРОКА( Документ.summa, 16, 2 ) );	Идентификатор_JSON	= ДАННЫЕ_JSON( "Идентификатор", GUIDДокумента );	Примечание_JSON		= ЕСЛИ( !ПУСТО( Документ.note ), "," + ДАННЫЕ_JSON( "ПримечаниеИС", Документ.note ), "" );		Контрагент			= """Контрагент"": " + СБИССведения( Документ.clientinn, Документ.clientkpp, Документ.clientname, Документ.clientfirstname, Документ.clientlastname, Документ.clientmidname );	Организация			= """НашаОрганизация"": " + СБИССведения( Документ.firminn,Документ.firmkpp, Документ.firmname, Документ.firmfirstname, Документ.firmlastname, Документ.firmmidname  );	ТекстЗапроса		= ПЕРЕКОДИРОВАТЬ( "{""jsonrpc"": ""2.0"",""method"": ""СБИС.ЗаписатьДокумент"",""params"":"+										  "{""Документ"": { " + Вложение + ", " + Дата_JSON + ", " + Номер_JSON + "," + Сумма_JSON + "," +										  Идентификатор_JSON + ", " + Контрагент + ", " + Организация + "" + Примечание_JSON + 										  ", ""Тип"": ""ДокОтгрИсх""}},""id"": 0 }", "ANSI", "UTF-8" );					Ответ				= HTTPPOST( Соединение, "service/?srv=1", ТекстЗапроса, "Заголовки" );	IF ( !МАРКИРОВКА.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );	ТекстЗапроса		= ПЕРЕКОДИРОВАТЬ( '{"jsonrpc": "2.0","method": "СБИС.ПрочитатьДокумент","params": {"Документ": { "Идентификатор":"' + GUIDДокумента + '" } }, "id": 0 }', "ANSI", "UTF-8" );	Ответ				= HTTPPOST( Соединение, "service/?srv=1", ТекстЗапроса, "Заголовки" );	IF ( !МАРКИРОВКА.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );	// Загружаем информацию о документе в структуру Результат	ЗАГРУЗИТЬJSON( "Результат", ПЕРЕКОДИРОВАТЬ( ПОЛЕ_JSON( Ответ, "result", "" ), "UTF-8", "ANSI" ), "Результат" );	// Если статус документ 7 (документ подтвержден) или 9 (документ отказан), то ничего не делаем	Статус				= VAL( ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Результат", "Состояние", "" ), "Код", "" ) );	IF ( Статус != 0 )	{		СтатусДокумента	= ЕСЛИ( Статус <= 4, 1, ЕСЛИ( Статус == 6, 4, ЕСЛИ( Статус == 7, 2, ЕСЛИ( Статус == 9, 3, 5 ) ) ) );		// Если все прошло без ошибок, то ставим статус отправки		ЗАПРОС( "UPDATE mark_out SET status = " + СтатусДокумента + " WHERE guid= '" + STDF( GUIDДокумента ) + "'" );		RETURN true;	}		ЗАГРУЗИТЬJSON( "СписокЭтапов", ЗНАЧЕНИЕПОЛЯ( "Результат", "Этап", "" ), "Текст" );	ПОКА ( !КОНЕЦКОНТЕКСТА( "СписокЭтапов" ) ) 	{		Этап			= ЗНАЧЕНИЕПОЛЯ( "СписокЭтапов", "Текст", "" );		ИДЭтапа			= ПОЛЕ_JSON( Этап, "Идентификатор", "" );		Название		= ПОЛЕ_JSON( ПОЛЕ_JSON( ПОЛЕ_JSON( Этап, "Действие", "" ), 0, "" ), "Название", "" );				ТекстЗапроса	= ПЕРЕКОДИРОВАТЬ( '{"jsonrpc": "2.0","method": "СБИС.ПодготовитьДействие","params": {"Документ": {"Идентификатор": "' + GUIDДокумента + '",'+										  '"Этап": {"Идентификатор":"' + ИДЭтапа + '", "Действие": { "Название": "' + Название + '", ' +  										  '"Сертификат": { ' + ФИОJSON + ', ' + ДолжностьJSON + ', ' + ИННJSON + ', ' + ОТПЕЧАТОКJSON + ' } } } } }, "id": 0 }', "ANSI", "UTF-8" );		Ответ			= HTTPPOST( Соединение, "service/?srv=1", ТекстЗапроса, "Заголовки" );		IF ( !МАРКИРОВКА.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );		// В ответе подготовленные данные, которые необходимо зашифровать и отправить		// Необходимо пройти по вложениям и подписать их ЭЦП		Вложения		= "";		ЗАГРУЗИТЬJSON( "Результат", ПЕРЕКОДИРОВАТЬ( ПОЛЕ_JSON( Ответ, "result", "" ), "UTF-8", "ANSI" ), "Результат" );		ЗАГРУЗИТЬJSON( "ЭтапыКВыполнению", ЗНАЧЕНИЕПОЛЯ( "Результат", "Этап", "" ), "Текст" );		ПОКА ( !КОНЕЦКОНТЕКСТА( "ЭтапыКВыполнению" ) ) 		{			ЗАГРУЗИТЬJSON( "Вложения", ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "ЭтапыКВыполнению", "Текст", "" ), "Вложение", "" ), "Текст" );			ПОКА ( !КОНЕЦКОНТЕКСТА( "Вложения" ) ) 			{				Вложение		= ЗНАЧЕНИЕПОЛЯ( "Вложения", "Текст" );				ИДВложения		= ПОЛЕ_JSON( Вложение, "Идентификатор", "" );				Файл			= ПОЛЕ_JSON( Вложение, "Файл", "" );				ФайлИмя			= ПОЛЕ_JSON( Файл, "Имя", "" );				ФайлСсылка		= ПОЛЕ_JSON( Файл, "Ссылка", "" );								Ссылка			= МАРКИРОВКА.URLDECODING( ПОЛЕ_JSON( Файл, "Ссылка", "" ) );				IF ( !ПУСТО( Ссылка ) )				{					Ссылка			= ПОДСТРОКА( Ссылка, ATC( Ссылка, "/", 3 ) + 1 );					Ответ			= HTTPGET( Соединение, Ссылка, "ЗаголовкиДок", "B" );					IF ( !МАРКИРОВКА.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( STR( _RESPONSECODE ) + " " + Ответ + CHR( 13 ) + Ссылка );					// Записываем подчиненный файл в базу					МАРКИРОВКА.СБИСЗаписатьСвязанныйДокумент( ПРЕДПРИЯТИЕ, GUIDДокумента, "", ИДЭтапа, ДОЛЖНОСТЬ, ПОДПИСАНТФАМИЛИЯ, ПОДПИСАНТИМЯ, ПОДПИСАНТОТЧЕСТВО, Ответ );					ШифрованныйХэш	= ПЕРЕКОДИРОВАТЬ( ШИФРОВАНИЕ( СЕРТИФИКАТ, Ответ, 1, true, false, _МАРКИРОВКА_ХРАНИЛИЩЕСЕРТИФИКАТОВ ), "", "BASE64" );					// Формируем текст объекта Файл					Файл			= "{" + ДАННЫЕ_JSON( "Имя", ФайлИмя ) + ","+											ДАННЫЕ_JSON( "Ссылка", ФайлСсылка ) + "}"; 																// Формируем текст объекта Файл					Подпись			= "{ ""Файл"":{" + ДАННЫЕ_JSON( "Имя", ФайлИмя + ".sgn" ) + ","+													   ДАННЫЕ_JSON( "ДвоичныеДанные", ШифрованныйХэш ) + "}}"; 					// Формируем текст объекта Вложение					Вложение		= "{" + ДАННЫЕ_JSON( "Идентификатор", ИДВложения ) + ","+									  """Файл"": " + Файл + ","+									  """Подпись"": [" + Подпись + "] }";									  					Вложения		+= ЕСЛИ( !ПУСТО( Вложения ), ",", "" ) + Вложение;				}				ПРОПУСТИТЬ( 1, "Вложения" );			}			УДАЛИТЬКОНТЕКСТ( "Вложения" );						ПРОПУСТИТЬ( 1, "ЭтапыКВыполнению" );		}		УДАЛИТЬКОНТЕКСТ( "ЭтапыКВыполнению" );				Вложения		= """Вложение"":[" + Вложения + "]";		ТекстЗапроса	= '{"jsonrpc": "2.0","method": "СБИС.ВыполнитьДействие","params": {"Документ": {"Идентификатор": "' + GUIDДокумента + '",'+						  '"Этап": {"Идентификатор":"' + ИДЭтапа + '", "Действие": { "Название": "' + Название + '", ' + 						  '"Сертификат": { ' + ФИОJSON + ', ' + ДолжностьJSON + ', ' + ИННJSON + ', ' + ОТПЕЧАТОКJSON + ', "Ключ":{ "Тип":"Клиентский"} } }, ' + Вложения + ' } } }, "id": 0 }';		Ответ			= HTTPPOST( Соединение, "service/?srv=1", ПЕРЕКОДИРОВАТЬ( ТекстЗапроса, "ANSI", "UTF-8" ), "Заголовки" );		IF ( !МАРКИРОВКА.СБИСПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );		ПРОПУСТИТЬ( 1, "СписокЭтапов" );	}	УДАЛИТЬКОНТЕКСТ( "СписокЭтапов" );		// Проверяем и обрабатываем служебные этапы, если такие появились	СлужебныеЗапросы	= 1;	ПОКА ( СлужебныеЗапросы > 0 )		СлужебныеЗапросы= Маркировка.СБИСОбработкаСлужебныхЭтапов( Предприятие, GUIDДокумента, "" );		IF ( СлужебныеЗапросы < 0 ) THROW ( "" );		// Если все прошло без ошибок, то ставим статус отправки	ЗАПРОС( "UPDATE mark_out SET status = 1 WHERE guid= '" + STDF( GUIDДокумента ) + "'" );}catch ( ТекстСообщения ){	СИСТЕМНОЕСООБЩЕНИЕ( );	HTTPCLOSE( Соединение );	СООБЩЕНИЕ( ТекстСообщения );	RETURN false;}HTTPCLOSE( Соединение );RETURN true;
