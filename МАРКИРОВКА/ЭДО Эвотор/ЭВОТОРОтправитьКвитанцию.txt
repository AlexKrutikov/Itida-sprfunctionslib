СЕРТИФИКАТ				= ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_CERTIFICATE" + ПРЕДПРИЯТИЕ + "'" );ТЕСТОВЫЙКОНТУР			= VAL( ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_APITEST" + ПРЕДПРИЯТИЕ + "'" ) ) != 0 ;ПОДПИСАНТИМЯ			= ДАННЫЕ_JSON( "first", ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDIFIRSTNAME" + ПРЕДПРИЯТИЕ + "'" ) );ПОДПИСАНТФАМИЛИЯ		= ДАННЫЕ_JSON( "last", ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDISURNAME" + ПРЕДПРИЯТИЕ + "'" ) );ПОДПИСАНТОТЧЕСТВО		= ДАННЫЕ_JSON( "middle", ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDIMIDDLENAME" + ПРЕДПРИЯТИЕ + "'" ) );ПОДПИСАНТДОЛЖНОСТЬ		= ДАННЫЕ_JSON( "position", ЗАПРОС( "SELECT value FROM param_ex WHERE param= 'MARK_EDIPOSITION" + ПРЕДПРИЯТИЕ + "'" ) );ПОДПИСЬ					= ПЕРЕКОДИРОВАТЬ( "{""person"":{" + ПОДПИСАНТИМЯ + "," + ПОДПИСАНТФАМИЛИЯ + ", " + ПОДПИСАНТОТЧЕСТВО + "}, " + ПОДПИСАНТДОЛЖНОСТЬ + "}", "ANSI", "UTF-8" );ЭВОТОРТОКЕН				= Маркировка.ЭВОТОРАвторизация( ПРЕДПРИЯТИЕ, СЕРТИФИКАТ );IF ( ПУСТО( ЭВОТОРТОКЕН ) ) RETURN false;АдресСервера 			= ЕСЛИ( ТЕСТОВЫЙКОНТУР, "https://edo-v2.platformaofd.ru", "https://edo.platformaofd.ru" );Заголовки[ 0 ]			= "Authorization: Bearer " + ЭВОТОРТОКЕН;Заголовки[ 1 ]			= "";КвитанцияНайдена		= false;// Проходим по дням периода и запрашиваем документы из Платформа ЭДОtry{	ТекстОшибки			= "Сервер " + АдресСервера + CHR( 13 ) + "вернул сообщение об ошибке: " + CHR( 13 );	Соединение 			= HTTPCONNECT( АдресСервера, "", true, Маркировка.ФАЙЛЖУРНАЛА( ) );	// Проверяем наличие квитанции у документа. Если квитанция есть, то не нужно её генерировать	Ответ				= HTTPGET( Соединение, "api/v2/document-flows?id=" + ИДДОКУМЕНТА + "&page=0&page_size=50", "Заголовки" );	IF ( !МАРКИРОВКА.ЭВОТОРПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );	ЗАГРУЗИТЬJSON( "СписокДокументов", Ответ, "text" );	ПЕРЕЙТИВНАЧАЛО( "СписокДокументов" );	ПОКА ( !КОНЕЦКОНТЕКСТА( "СписокДокументов" ) )	{		ЗАГРУЗИТЬJSON( "Документ", ЗНАЧЕНИЕПОЛЯ( "СписокДокументов", "text", "" ) );		ДокументИД		= ЗНАЧЕНИЕПОЛЯ( "Документ", "id", "" );		ДокументТИП		= ЗНАЧЕНИЕПОЛЯ( "Документ", "type", "" );				ДокументПуть	= ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Документ", "content", "" ), "uri", "" );		ПодписьПуть		= ПОЛЕ_JSON( ЗНАЧЕНИЕПОЛЯ( "Документ", "signature", "" ), "uri", "" );				// Интересуют только квитанции и подтверждения даты		IF ( ДокументТИП == "DP_PDOTPR" )		{			// Для документа подтверждения даты отгрузки необходимо отправить квитанцию			IF ( !Маркировка.ЭВОТОРОтправитьКвитанцию( ПРЕДПРИЯТИЕ, ДокументИД, true ) ) THROW( "" );		}		ELSE IF ( ДокументТИП == "DP_IZVPOL" )		{			// Квитанция уже есть. Проверяем её подпись			IF ( ПУСТО( ПодписьПуть ) )				IF ( !Маркировка.ЭВОТОРПрикрепитьПодпись( ПРЕДПРИЯТИЕ, ДокументИД ) ) THROW( "" );			КвитанцияНайдена		= true;		}		ELSE IF ( ДокументТИП == "ON_SCHFDOPPOK" OR ДокументТИП == "DP_UVUTOCH" )			НАЙДЕНТИТУЛ				= true;					УДАЛИТЬКОНТЕКСТ( "Документ" );		ПРОПУСТИТЬ( 1, "СписокДокументов" );	}	УДАЛИТЬКОНТЕКСТ( "СписокДокументов" );	// Если квитанции нет, то создаем её	IF ( !КвитанцияНайдена && СОЗДАВАТЬЕСЛИНЕНАЙДЕНА )	{		Заголовки[ 1 ]		= "Content-Type: application/json;charset=UTF-8";		Ответ				= HTTPPUT( Соединение, "api/v2/documents/" + ИДДОКУМЕНТА + "/notification", ПОДПИСЬ, "Заголовки" );		IF ( !МАРКИРОВКА.ЭВОТОРПРОВЕРКАНАОШИБКИ( @Ответ ) ) THROW ( Ответ );				// Записываем связанный документ в базу		Маркировка.ЭВОТОРЗаписатьСвязанныйДокумент( ПРЕДПРИЯТИЕ, ИДДокумента, Ответ );		// Из полученного ответа извлекаем ИД докуменнта и прикрепляем к нему подпись		ИДКвитанции			= ПОЛЕ_JSON( Ответ, "id", "" );		IF ( ПУСТО( ИДКвитанции ) ) THROW ( "Сервер вернул ошибочный ответ: " + CHR( 13 ) + Ответ );		IF ( !Маркировка.ЭВОТОРПрикрепитьПодпись( ПРЕДПРИЯТИЕ, ИДКвитанции ) ) THROW( "" );				// На квитанцию сервер мог сгенерировать DP_PDOTPR - его тоже надо подписать		IF ( !Маркировка.ЭВОТОРОтправитьКвитанцию( ПРЕДПРИЯТИЕ, ИДКвитанции, false ) ) THROW( "" );	}}catch ( ТекстСообщения ){	HTTPCLOSE( Соединение );	IF ( !ПУСТО( ТекстСообщения ) ) СООБЩЕНИЕ( ТекстСообщения );	RETURN false;}HTTPCLOSE( Соединение );RETURN true;
