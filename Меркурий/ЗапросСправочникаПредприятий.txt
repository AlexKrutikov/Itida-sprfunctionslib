Меркурий.ЗагрузитьПараметры( );Фильтр					= "";IF ( !ПУСТО( GUID ) OR !ПУСТО( НАИМЕНОВАНИЕ ) OR !ПУСТО( ИНН ) ){	Фильтр				= "<v21:businessEntity>";	IF ( !ПУСТО( GUID ) )		Фильтр			+= "<base:guid>" + ЕГАИС.ЗаменитьСимволы( СЖАТЬПРОБЕЛЫ( GUID ) ) + "</base:guid>";	IF ( !ПУСТО( НАИМЕНОВАНИЕ ) )		Фильтр			+= "<v21:name>" + ЕГАИС.ЗаменитьСимволы( СЖАТЬПРОБЕЛЫ( НАИМЕНОВАНИЕ ) ) + "</v21:name>";	IF ( !ПУСТО( ИНН ) )		Фильтр			+= "<v21:inn>" + ЕГАИС.ЗаменитьСимволы( СЖАТЬПРОБЕЛЫ( ИНН ) ) + "</v21:inn>";	Фильтр				+= "</v21:businessEntity>";}ДОБАВИТЬКОНТЕКСТ( "SET FMTONLY ON SELECT CONVERT( int, 0 ) AS count, CONVERT( int, 0 ) AS total, CONVERT( int, 0 ) AS offset SET FMTONLY OFF", "Данные" );ДОБАВИТЬКОНТЕКСТ( "SET FMTONLY ON SELECT '' AS bs_guid, '' AS dt_name, '' AS dt_fullname, '' AS dt_fio, '' AS dt_passport, '' AS dt_inn, '' AS dt_kpp, '' AS dt_ogrn, '' AS dt_addressView SET FMTONLY OFF", "Партнеры" );ДОБАВИТЬКОНТЕКСТ( "SET FMTONLY ON SELECT '' AS bs_guid, '' AS dt_name, '' AS dt_addressView SET FMTONLY OFF", "Адреса" );ИДЗагрузки				= ЗАПРОС( "SELECT NEWID( )" );Количество				= 0;ТекущееСмещение			= 0;ОбщееКоличество			= 0;СИСТЕМНОЕСООБЩЕНИЕ( "Запрос справочника организаций" );WHILE ( Количество == 0 OR ТекущееСмещение < ОбщееКоличество ){	Количество			= 10;	Текст = "	<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:v2=""http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2""					  xmlns:base=""http://api.vetrf.ru/schema/cdm/base"" xmlns:v21=""http://api.vetrf.ru/schema/cdm/dictionary/v2"">	   <soapenv:Header/>	   <soapenv:Body>		  <v2:getBusinessEntityListRequest>			 <base:listOptions>				<base:count>" + Количество + "</base:count>				<base:offset>" + ТекущееСмещение + "</base:offset>			 </base:listOptions>			 " + Фильтр  + "		   </v2:getBusinessEntityListRequest>	   </soapenv:Body>	</soapenv:Envelope>	";	ОтветСервера			= Меркурий.ОтправитьЗапрос( Текст, "ПРЕДПРИЯТИЯ" );	ЗАГРУЗИТЬ( "Данные", "XMLSTRING", ОтветСервера );	flag					= 0;	ЗАГРУЗИТЬ( "Партнеры", "XMLSTRING", ОтветСервера, "dt:businessEntity", "", "dt:businessEntity", "dt:country dt:region dt:district dt:locality dt:subLocality dt:street dt:incorporationForm" );	ПЕРЕЙТИВНАЧАЛО( "Данные" );		ТекущееСмещение		= Данные.offset + Данные.count;	IF ( ОбщееКоличество == 0 )	{		ОбщееКоличество	= Данные.total;		IF ( ОбщееКоличество > 10 )			ИНДИКАТОР( "Загрузка справочника партнеров", ОбщееКоличество );	}	ELSE IF ( ОбщееКоличество > 10 )		ИНДИКАТОР( ТекущееСмещение, "Загружено " + STR( ТекущееСмещение ) + " из " + STR( ОбщееКоличество ) );			// Если нажали ESC, то прерываемся	IF ( ОБРАБОТАТЬСОБЫТИЯ( 256 ) )		_ПРЕРВАТЬВЫПОЛНЕНИЕ		= _LASTMESSAGE_WPARAM == 27;	ОБРАБОТАТЬСОБЫТИЯ( );	IF ( _ПРЕРВАТЬВЫПОЛНЕНИЕ ) 	{		ИНДИКАТОР( );		УДАЛИТЬКОНТЕКСТ( "Данные" );		УДАЛИТЬКОНТЕКСТ( "Партнеры" );		УДАЛИТЬКОНТЕКСТ( "Адреса" );		RETURN "";	}		УДАЛИТЬ( "ALL", "Данные" );}ИНДИКАТОР( );УДАЛИТЬКОНТЕКСТ( "Данные" );// Запишем полученный результат в справочник странПЕРЕЙТИВНАЧАЛО( "Партнеры" );ИНДИКАТОР( "Загрузка адресов партнеров", КОЛИЧЕСТВОСТРОК( "Партнеры" ) );WHILE ( !КОНЕЦКОНТЕКСТА( "Партнеры" ) ){	ИНДИКАТОР( НОМЕРСТРОКИ( "Партнеры" ), "Загружено " + STR( НОМЕРСТРОКИ( "Партнеры" ) ) + " из " + STR( КОЛИЧЕСТВОСТРОК( "Партнеры" ) ) );	__SQL {		IF EXISTS( SELECT * FROM mrc_partners WHERE guid = '[[STDF( Партнеры.bs_guid )]]' ) 			UPDATE mrc_partners SET name= '[[STDF( ЕСЛИ( ПУСТО( Партнеры.dt_name ), Партнеры.dt_fio, Партнеры.dt_name ) )]]', 									fullname= '[[STDF( ЕСЛИ( ПУСТО( Партнеры.dt_fullname ), Партнеры.dt_fio, Партнеры.dt_fullname ) )]]', 									fio= '[[STDF( Партнеры.dt_fio )]]', passport= '[[STDF( Партнеры.dt_passport )]]', 									inn= '[[STDF( Партнеры.dt_inn )]]', kpp= '[[STDF( Партнеры.dt_kpp )]]', 									ogrn= '[[STDF( Партнеры.dt_ogrn )]]', address= '[[STDF( Партнеры.dt_addressView )]]',									loadid= '[[ИДЗагрузки]]'			WHERE guid = '[[STDF( Партнеры.bs_guid )]]';		ELSE			INSERT INTO mrc_partners ( guid, name, fullname, fio, passport, inn, kpp, ogrn, address, loadid ) 			VALUES ( '[[STDF( Партнеры.bs_guid )]]', '[[STDF( ЕСЛИ( ПУСТО( Партнеры.dt_name ), Партнеры.dt_fio, Партнеры.dt_name ) )]]', '[[STDF( ЕСЛИ( ПУСТО( Партнеры.dt_fullname ), Партнеры.dt_fio, Партнеры.dt_fullname ) )]]', '[[STDF( Партнеры.dt_fio )]]', 					 '[[STDF( Партнеры.dt_passport )]]', '[[STDF( Партнеры.dt_inn )]]', '[[STDF( Партнеры.dt_kpp )]]', '[[STDF( Партнеры.dt_ogrn )]]', '[[STDF( Партнеры.dt_addressView )]]', '[[ИДЗагрузки]]' );	}	// Для запроса адресов необходимо сначала запросить getBusinessEntityByGuidRequest	Текст = "	<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:v2=""http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2""					  xmlns:base=""http://api.vetrf.ru/schema/cdm/base"" xmlns:v21=""http://api.vetrf.ru/schema/cdm/dictionary/v2"">	   <soapenv:Header/>	   <soapenv:Body>		  <v2:getActivityLocationListRequest>			 <base:listOptions>				<base:count>1000</base:count>				<base:offset>0</base:offset>			 </base:listOptions>			<v21:businessEntity>				<base:guid>" + ЕГАИС.ЗаменитьСимволы( Партнеры.bs_guid ) + "</base:guid>			 </v21:businessEntity>		   </v2:getActivityLocationListRequest>	   </soapenv:Body>	</soapenv:Envelope>	";		ОтветСервера			= Меркурий.ОтправитьЗапрос( Текст, "ПРЕДПРИЯТИЯ" );	ЗАГРУЗИТЬ( "Адреса", "XMLSTRING", ОтветСервера, "dt:enterprise", "", "dt:enterprise", "dt:numberList dt:owner dt:officialRegistration dt:country dt:region dt:district dt:locality dt:street" );	ПЕРЕЙТИВНАЧАЛО( "Адреса" );	WHILE ( !КОНЕЦКОНТЕКСТА( "Адреса" ) )	{		__SQL {			IF EXISTS( SELECT * FROM mrc_partner_addresses WHERE guid = '[[STDF( Адреса.bs_guid )]]' ) 				UPDATE mrc_partner_addresses SET partner= '[[STDF( Партнеры.bs_guid )]]', name= '[[STDF( Адреса.dt_name )]]', address= '[[STDF( Партнеры.dt_addressView )]]' 				WHERE guid = '[[STDF( Адреса.bs_guid )]]';			ELSE				INSERT INTO mrc_partner_addresses ( partner, guid, name, address ) 				VALUES ( '[[STDF( Партнеры.bs_guid )]]', '[[STDF( Адреса.bs_guid )]]', '[[STDF( Адреса.dt_name )]]', '[[STDF( Адреса.dt_addressView )]]' );		}		ПРОПУСТИТЬ( 1, "Адреса" );	}	УДАЛИТЬ( "ALL", "Адреса" );		ПРОПУСТИТЬ( 1, "Партнеры" );}УДАЛИТЬКОНТЕКСТ( "Партнеры" );RETURN ИДЗагрузки;
