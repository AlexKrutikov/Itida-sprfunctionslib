Меркурий.ЗагрузитьПараметры( );ДОБАВИТЬКОНТЕКСТ( "SET FMTONLY ON SELECT CONVERT( int, 0 ) AS count, CONVERT( int, 0 ) AS total, CONVERT( int, 0 ) AS offset SET FMTONLY OFF", "Данные" );ДОБАВИТЬКОНТЕКСТ( "SET FMTONLY ON SELECT '' AS consignor, '' AS consignor_be, '' AS consignor_ent, '' AS consignee, '' AS consignee_be, '' AS consignee_ent, '' AS broker, 										 '' AS product, '' AS product_type, '' AS product_guid, '' AS subproduct_guid, '' AS productitem_guid, '' AS productitem_name, 										 '' AS productitem_volume, '' AS productitem_unit, '' AS productitem_gtin, '' AS productitem_code, '' AS productitem_producer, 										 '' AS productitem_country, '' AS certificate, CONVERT( datetime, '' ) AS issueDate, '' AS issueNumber, '' AS vetDStatus,										 '' AS transportInfo, '' AS transportStorageType, '' AS waybill, '' AS waybill_number, '' AS origin_date, '' AS expiry_date,										 '' AS purpose, '' AS locationProsperity, '' AS authentication SET FMTONLY OFF", "Сертификаты" );// Если указан период для загрузки ВСД, то добавляем условиеУсловиеНаПериод					= "";IF ( ПУСТО( ВСДGUID ) && ПУСТО( ИМЯТАБЛИЦЫ ) ){	IF ( !ПУСТО( _НАЧАЛОПЕРИОДА ) )	{		УсловиеНаПериод				= "<v21:issueDateInterval>											<base:beginDate>" + DTOC( _НАЧАЛОПЕРИОДА, 7, "-" ) + "T00:00:00</base:beginDate>											<base:endDate>" + DTOC( _КОНЕЦПЕРИОДА, 7, "-" ) + "T23:59:59</base:endDate>									   </v21:issueDateInterval>";	/*			<!--						<v21:issueDateInterval>											<base:beginDate>2017-07-07T00:00:00</base:beginDate>											<base:endDate>2017-07-25T00:00:00</base:endDate>										</v21:issueDateInterval> -->	*/	}}ИДЗагрузки				= ЗАПРОС( "SELECT NEWID( )" );Количество				= 0;ТекущееСмещение			= 0;ОбщееКоличество			= 0;НомерПопытки			= 0;_ПРЕРВАТЬВЫПОЛНЕНИЕ		= false;СИСТЕМНОЕСООБЩЕНИЕ( "Запрос списка непогашенных ВСД" );СИСТЕМНОЕСООБЩЕНИЕ( "#2Соединение с сервером ГИС Меркурий" );ДОБАВИТЬКОНТЕКСТ( ЕСЛИ( !ПУСТО( ИМЯТАБЛИЦЫ ), "SELECT guid FROM " + ИМЯТАБЛИЦЫ, "SELECT '' AS guid" ), "СписокОбновляемыхВСД" );WHILE ( !_ПРЕРВАТЬВЫПОЛНЕНИЕ && !КОНЕЦКОНТЕКСТА( "СписокОбновляемыхВСД" ) ){	IF ( !ПУСТО( СписокОбновляемыхВСД.guid ) )		ВСДGUID					= СписокОбновляемыхВСД.guid;			WHILE ( Количество == 0 OR ТекущееСмещение < ОбщееКоличество )	{		НомерПопытки			= 0;		ВРаботе					= true;		НовыйЗапрос				= true;		WHILE ( ВРаботе AND НомерПопытки < 50 )		{	//									<v21:vetDocumentStatus>CONFIRMED</v21:vetDocumentStatus>" + УсловиеНаПериод + "			НомерПопытки++;			IF ( НовыйЗапрос )			{				IF ( ПУСТО( ВСДGUID ) )				{					Текст = "					<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:ws=""http://api.vetrf.ru/schema/cdm/application/ws-definitions"" xmlns:app=""http://api.vetrf.ru/schema/cdm/application"">						<soapenv:Header/>						<soapenv:Body>							<ws:submitApplicationRequest>								<ws:apiKey>" + APIKey + "</ws:apiKey>								<app:application>									<app:serviceId>mercury-g2b.service:2.1</app:serviceId>									<app:issuerId>" + Предприятие + "</app:issuerId>									<app:issueDate>" + ЗАМЕНИТЬ( TTOC( ДАТАВРЕМЯ( ), 7, "-" ), " ", "T" ) + "</app:issueDate>									<app:data>										<v2:getVetDocumentListRequest xmlns:v2=""http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2"" 																	  xmlns:base=""http://api.vetrf.ru/schema/cdm/base"" 																	  xmlns:v21=""http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2"" 																	  xmlns:v22=""http://api.vetrf.ru/schema/cdm/dictionary/v2"">											<v2:localTransactionId>A0001</v2:localTransactionId>											<v2:initiator>												<v21:login>" + Инициатор + "</v21:login>											</v2:initiator>											<base:listOptions>												<base:count>100</base:count>												<base:offset>" + ТекущееСмещение + "</base:offset>											</base:listOptions>											<v21:vetDocumentType>INCOMING</v21:vetDocumentType>											<v21:vetDocumentStatus>" + ВСДСтатус + "</v21:vetDocumentStatus>" + УсловиеНаПериод + "											<v22:enterpriseGuid>" + Адрес + "</v22:enterpriseGuid>										</v2:getVetDocumentListRequest>									</app:data>								</app:application>							</ws:submitApplicationRequest>						</soapenv:Body>					</soapenv:Envelope>";				}				ELSE				{					Текст = "					<soapenv:Envelope xmlns:dt=""http://api.vetrf.ru/schema/cdm/dictionary/v2""						xmlns:bs=""http://api.vetrf.ru/schema/cdm/base""						xmlns:merc=""http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2""						xmlns:apldef=""http://api.vetrf.ru/schema/cdm/application/ws-definitions""						xmlns:apl=""http://api.vetrf.ru/schema/cdm/application""						xmlns:vd=""http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2"" 						xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"">												<soapenv:Header/>						<soapenv:Body>								<apldef:submitApplicationRequest>  								<apldef:apiKey>" + APIKey + "</apldef:apiKey>								<apl:application>									<apl:serviceId>mercury-g2b.service:2.0</apl:serviceId>									<apl:issuerId>" + Предприятие + "</apl:issuerId>									<apl:issueDate>" + ЗАМЕНИТЬ( TTOC( ДАТАВРЕМЯ( ), 7, "-" ), " ", "T" ) + "</apl:issueDate>									<apl:data>										<merc:getVetDocumentByUuidRequest>											<merc:localTransactionId>A0001</merc:localTransactionId>											<merc:initiator>												<vd:login>" + Инициатор + "</vd:login>											</merc:initiator>											<bs:uuid>" + ВСДGUID + "</bs:uuid>											<dt:enterpriseGuid>" + Адрес + "</dt:enterpriseGuid>										</merc:getVetDocumentByUuidRequest>									</apl:data>								</apl:application>							</apldef:submitApplicationRequest>						</soapenv:Body>					</soapenv:Envelope>";				}				ОтветСервера			= Меркурий.ОтправитьЗапрос( Текст, "ЗАЯВКИ" );			//	Сообщение( ОтветСервера );				ДОБАВИТЬКОНТЕКСТ( "SET FMTONLY ON SELECT '' AS applicationId, '' AS status, '' AS apl_status, '' AS apl_error SET FMTONLY OFF", "Ответ" );				ЗАГРУЗИТЬ( "Ответ", "XMLSTRING", ОтветСервера );				ПЕРЕЙТИВНАЧАЛО( "Ответ" );				IF ( UPPER( ALLTRIM( Ответ.status ) ) <> "ACCEPTED" ) 				{					IF ( !ПУСТО( ОтветСервера ) )						СИСТЕМНОЕСООБЩЕНИЕ( "#2#ErrorОшибка ГИС Меркурий. " + Ответ.status );					RETURN "";				}				ИДЗаявки				= Ответ.applicationId;				УДАЛИТЬ( "ALL", "Ответ" );				Текст = "				<soapenv:Envelope xmlns:soapenv=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:ws=""http://api.vetrf.ru/schema/cdm/application/ws-definitions"" >					<soapenv:Header/>					<soapenv:Body>						<ws:receiveApplicationResultRequest>							<ws:apiKey>" + APIKey + "</ws:apiKey>							<ws:issuerId>" + Предприятие + "</ws:issuerId>							<ws:applicationId>" + ИДЗаявки + "</ws:applicationId>						</ws:receiveApplicationResultRequest>					</soapenv:Body>				</soapenv:Envelope>";			}			ОтветСервера		= Меркурий.ОтправитьЗапрос( Текст, "ЗАЯВКИ" );			IF ( ПУСТО( ОтветСервера ) ) RETURN "";						УДАЛИТЬ( "ALL", "Ответ" );			ЗАГРУЗИТЬ( "Ответ", "XMLSTRING", ОтветСервера, "application", "", "application" );			IF ( AT( ОтветСервера, "APLM0012" ) > 0 )			{				СИСТЕМНОЕСООБЩЕНИЕ( "#2#ErrorОшибка ГИС Меркурий APLM0012. Попытка " + НомерПопытки );				ВРаботе			= true;				НовыйЗапрос		= true;			}			ELSE			{				IF ( UPPER( ALLTRIM( Ответ.status ) ) == "REJECTED" )				{					СИСТЕМНОЕСООБЩЕНИЕ( "#2#ErrorОшибка ГИС Меркурий. " + Ответ.apl_error );					RETURN "";				}				ВРаботе			= UPPER( ALLTRIM( Ответ.status ) ) == "IN_PROCESS"  OR UPPER( ALLTRIM( Ответ.apl_status ) ) == "IN_PROCESS";				НовыйЗапрос		= false;				IF ( ВРаботе )				{					СИСТЕМНОЕСООБЩЕНИЕ( "#2Запрос обрабатывается. Попытка " + НомерПопытки );					ОЖИДАНИЕ( 1000 );				}				ELSE					СИСТЕМНОЕСООБЩЕНИЕ( "#2Получены данные. Обработка" );			}			ОБРАБОТАТЬСОБЫТИЯ( );			IF ( _ПРЕРВАТЬВЫПОЛНЕНИЕ ) BREAK;		}		IF ( НомерПопытки >= 50 OR _ПРЕРВАТЬВЫПОЛНЕНИЕ ) BREAK;				//Сообщение( ОтветСервера );	/*		файл			= ФАЙЛОТКРЫТЬ( "D:\vsd.xml" );		ОтветСервера	= ФАЙЛПРОЧИТАТЬ( файл, "S", 100000 );		ФАЙЛЗАКРЫТЬ( файл );	*/	//	Сообщение( ОтветСервера );				// Разбираем ответ на следующие части, которые потом запишем в сертификат		// 1. Сведения об отправителе consignor		// 2. Сведения о получателе consignee		// 3. Сведения о перевозчике		// 4. Сведения о продукции product		// 5. Сведения о сертификате (GUID)		// ТЭГ <vd:vetDocument> разделяет сертификаты		// Внутри него ТЭГ ·<bs:uuid>UUID</bs:uuid> - ИД Сертификата		// <vd:certifiedConsignment> - сертифицируемая партия		// Внутри партии <vd:consignor> - отправитель		// <vd:consignee> - получатель		// <vd:batch> - продукция		ЗАГРУЗИТЬ( "Данные", "XMLSTRING", ОтветСервера, "vd:vetDocumentList", "", "vd:vetDocumentList" );		ПЕРЕЙТИВНАЧАЛО( "Данные" );		ВЫБРАТЬКОНТЕКСТ( "" );				consignor				= "";		consignee				= "";		broker					= "";		product					= "";		origin_date				= "";		expiry_date				= "";		certificate				= "";		currentstate			= "";		currentsubstate			= "";		АТРИБУТЫ				= "";		РАЗОБРАТЬ_XML( ОтветСервера, "Меркурий.МеркурийРазобратьТэгиСертификата", true );				Количество			= 10;		ТекущееСмещение		= Данные.offset + Данные.count;		IF ( ОбщееКоличество == 0 )		{			ОбщееКоличество	= Данные.total;			IF ( ОбщееКоличество > 10 )				ИНДИКАТОР( "Загрузка ВСД", ОбщееКоличество );		}		ELSE IF ( ОбщееКоличество > 10 )			ИНДИКАТОР( ТекущееСмещение, "Загружено " + STR( ТекущееСмещение ) + " из " + STR( ОбщееКоличество ) );					УДАЛИТЬ( "ALL", "Данные" );	}		ПРОПУСТИТЬ( 1, "СписокОбновляемыхВСД" );}УДАЛИТЬКОНТЕКСТ( "СписокОбновляемыхВСД" );ИНДИКАТОР( );IF ( _ПРЕРВАТЬВЫПОЛНЕНИЕ ) {	УДАЛИТЬКОНТЕКСТ( "Данные" );	УДАЛИТЬКОНТЕКСТ( "Сертификаты" );	RETURN "";}	ВЫБРАТЬКОНТЕКСТ( "Сертификаты" );ПЕРЕЙТИВНАЧАЛО( );/*файл				= ФАЙЛОТКРЫТЬ( "D:\данные.txt", 1, 2 );ФАЙЛУСТАНОВИТЬУКАЗАТЕЛЬ( файл, 0, 0, 2 );*/WHILE ( !КОНЕЦКОНТЕКСТА( ) ){/*	ФАЙЛЗАПИСАТЬСТРОКУ( Файл, "consignor: " + consignor );	ФАЙЛЗАПИСАТЬСТРОКУ( Файл, "consignee: " + consignee );	ФАЙЛЗАПИСАТЬСТРОКУ( Файл, "product: " + product );	ФАЙЛЗАПИСАТЬСТРОКУ( Файл, "product_type: " + product_type );	ФАЙЛЗАПИСАТЬСТРОКУ( Файл, "product_guid: " + product_guid );	ФАЙЛЗАПИСАТЬСТРОКУ( Файл, "subproduct_guid: " + subproduct_guid );	ФАЙЛЗАПИСАТЬСТРОКУ( Файл, "productitem_guid: " + productitem_guid );	ФАЙЛЗАПИСАТЬСТРОКУ( Файл, "productitem_name: " + productitem_name );	ФАЙЛЗАПИСАТЬСТРОКУ( Файл, "productitem_volume: " + productitem_volume );	ФАЙЛЗАПИСАТЬСТРОКУ( Файл, "productitem_unit: " + productitem_unit );	ФАЙЛЗАПИСАТЬСТРОКУ( Файл, "certificate: " + certificate );*/	// Теперь необходимо заполнить таблицу с партнерами mrc_partners. Если партнера нет, то запросить его	ИДПартнера		= ЗАПРОС( "SELECT guid FROM mrc_partners WHERE guid= '" + consignor_be + "'" );	IF ( ПУСТО( ИДПартнера ) AND !ПУСТО( consignor_be ) )		Меркурий.ЗапросСправочникаПредприятий( consignor_be );	ВЫБРАТЬКОНТЕКСТ( "Сертификаты" );	ИДПартнера		= ЗАПРОС( "SELECT guid FROM mrc_partners WHERE guid= '" + consignee_be + "'" );	IF ( ПУСТО( ИДПартнера ) AND !ПУСТО( consignee_be ) )		Меркурий.ЗапросСправочникаПредприятий( consignee_be );	ВЫБРАТЬКОНТЕКСТ( "Сертификаты" );	ИДПартнера		= ЗАПРОС( "SELECT guid FROM mrc_partners WHERE guid= '" + productitem_producer + "'" );	IF ( ПУСТО( ИДПартнера ) AND !ПУСТО( productitem_producer ) )		Меркурий.ЗапросСправочникаПредприятий( productitem_producer );	ВЫБРАТЬКОНТЕКСТ( "Сертификаты" );	// Теперь необходимо заполнить таблицу с товарами mrc_wares	НоваяПродукция		= false;		IF ( !ПУСТО( productitem_guid ) )	{		НоваяПродукция	= ПУСТО( ЗАПРОС( "SELECT guid FROM mrc_wares WHERE guid= '" + productitem_guid + "'" ) );		wareguid		= productitem_guid;	}	ELSE	{		wareguid		= ЗАПРОС( "SELECT guid FROM mrc_wares WHERE productType= " + STR( VAL( product_type ) ) + " AND level1_guid = '" + STDF( product_guid ) + "' AND 																			level2_guid = '" + STDF( subproduct_guid ) + "' AND name = '" + STDF( productitem_name ) + "'" );		НоваяПродукция	= ПУСТО( wareguid );		IF ( НоваяПродукция )			wareguid	= ЗАПРОС( "SELECT NEWID( )" );	}	IF ( НоваяПродукция )		ЗАПРОС( "INSERT INTO mrc_wares ( productType, level1_guid, level2_guid, guid, name, producer_code, globalID, country, producer, unit, loadid )				 VALUES ( " + STR( VAL( product_type ) ) + ", '" + STDF( product_guid ) + "', '" + STDF( subproduct_guid ) + "', '" + STDF( wareguid )+ "', 						 '" + STDF( productitem_name ) + "', '" + STDF( productitem_code ) + "', '" + STDF( productitem_gtin ) + "', '" + STDF( productitem_country ) + "', 						 '" + STDF( productitem_producer ) + "', '" + STDF( productitem_unit ) + "', '" + ИДЗагрузки + "' ) " );	ELSE ЗАПРОС( "UPDATE mrc_wares 				 SET 					productType		=  " + STR( VAL( product_type ) ) + ", 					level1_guid		= '" + STDF( product_guid ) + "', 					level2_guid		= '" + STDF( subproduct_guid ) + "', 					name			= '" + STDF( productitem_name ) + "', 					producer_code	= '" + STDF( productitem_code ) + "', 					globalID		= '" + STDF( productitem_gtin ) + "', 					country			= '" + STDF( productitem_country ) + "', 					producer		= '" + STDF( productitem_producer ) + "', 					unit			= '" + STDF( productitem_unit ) + "', 					loadid			= '" + ИДЗагрузки + "' 				 WHERE guid = '" + STDF( wareguid )+ "'" );		// Записываем сам сертификат	НомерСертификата				= ЕСЛИ( ПУСТО( issueNumber ), "б/н", issueNumber );	IF ( ПУСТО( ЗАПРОС( "SELECT guid FROM mrc_sertificate WHERE guid = '" + certificate + "'" ) ) )		ЗАПРОС( "INSERT INTO mrc_sertificate ( guid, issueDate, issueNumber, mrcware, income, consignor, consignee, broker, product, vetDType, vetDStatus, consignor_be, consignor_ent, consignee_be, consignee_ent, 											   quantity, unit, transportInfo, transportStorageType, waybill, waybill_number, origin_date, expiry_date, purpose, locationProsperity, authentication, ent )				 VALUES ( '" + STDF( certificate ) + "', '" + CTOD( TTOC( issueDate ) ) + "', '" + STDF( НомерСертификата ) + "', '" + STDF( wareguid ) + "', 1, '" + STDF( consignor ) + "', '" + STDF( consignee ) + "', '" + STDF( broker ) + "',						  '" + STDF( product ) + "', 'INCOMING', '" + STDF( vetDStatus ) + "', '" + STDF( consignor_be ) + "', '" + STDF( consignor_ent ) + "', '" + STDF( consignee_be ) + "', '" + STDF( consignee_ent ) + "', 						   " + STR( VAL( productitem_volume ), 20, 8 ) + ", '" + STDF( productitem_unit ) + "', '" + STDF( transportInfo ) + "', '" + STDF( transportStorageType ) + "', 						  '" + STDF( waybill ) + "', '" + STDF( waybill_number ) + "', '" + STDF( origin_date ) + "', '" + STDF( expiry_Date ) + "', '" + STDF( purpose ) + "', 						  '" + STDF( locationProsperity ) + "', '" + STDF( authentication ) + "', '" + STDF( _КОДМЕРКУРИЯ ) + "' ) " );	ELSE		ЗАПРОС( "UPDATE mrc_sertificate 				 SET					mrcware					= '" + STDF( wareguid ) + "',					consignor				= '" + STDF( consignor ) + "',					consignee				= '" + STDF( consignee ) + "', 					broker					= '" + STDF( broker ) + "', 					product					= '" + STDF( product ) + "', 					transportInfo			= '" + STDF( transportInfo ) + "', 					transportStorageType	= '" + STDF( transportStorageType ) + "', 					waybill					= '" + STDF( waybill ) + "', 					waybill_number			= '" + STDF( waybill_number ) + "', 					consignor_be			= '" + STDF( consignor_be ) + "', 					consignor_ent			= '" + STDF( consignor_ent ) + "', 					consignee_be			= '" + STDF( consignee_be ) + "', 					consignee_ent			= '" + STDF( consignee_ent ) + "', 					quantity				=  " + STR( VAL( productitem_volume ), 20, 8 ) + ",					unit 					= '" + STDF( productitem_unit ) + "',					ent						= '" + STDF( _КОДМЕРКУРИЯ ) + "',					issueDate				= '" + CTOD( TTOC( issueDate ) ) + "',					issueNumber				= '" + STDF( НомерСертификата ) + "',					origin_date				= '" + STDF( origin_date ) + "', 					expiry_date				= '" + STDF( expiry_date ) + "', 					vetDStatus				= '" + STDF( vetDStatus ) + "',					purpose					= '" + STDF( purpose ) + "',					locationProsperity		= '" + STDF( locationProsperity ) + "',					authentication			= '" + STDF( authentication ) + "',					status					= 0,					reload					= 0				 WHERE guid = '" + STDF( certificate ) + "'" );		ПРОПУСТИТЬ( 1, "Сертификаты" );}/*ФАЙЛЗАКРЫТЬ( файл );*/УДАЛИТЬКОНТЕКСТ( "Сертификаты" );УДАЛИТЬКОНТЕКСТ( "Данные" );RETURN ИДЗагрузки;
