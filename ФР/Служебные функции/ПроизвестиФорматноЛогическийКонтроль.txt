IF ( !ПЕРЕМЕННАЯ( "_ККТ_ИСПОЛЬЗОВАТЬФЛК", true ) )
{
	RETURN true;
}


ЭТОРМК = false;			
IF (TYPE("_МРП") <> "U")
	ЭТОРМК = _МРП == "2";

ДопустимоеРасхождениеФЛК = ПЕРЕМЕННАЯ( "_ККТ_ДОПУСТИМОЕРАСХОЖДЕНИЕФЛК", 0.01 ); // В соответствии с текущей версией 54-ФЗ

//вычислим номер первой строки с товарной позицией
НомерПервойСтрокиТовара = ЗАПРОС("SELECT TOP 1 identity_column FROM " + ИмяТаблицыСтрокЧека + " WHERE operation = 'Регистрация' OR operation = 'Возврат' ORDER BY identity_column ASC");
//вычислим номер последней строки с товарной позицией
НомерПоследнейСтрокиТовара = ЗАПРОС("SELECT TOP 1 identity_column FROM " + ИмяТаблицыСтрокЧека + " WHERE operation = 'Регистрация' OR operation = 'Возврат' ORDER BY identity_column DESC");
	


//копируем все команды, располагающиеся до первой строки товаров в новую таблицу команд чека
ДОБАВИТЬКОНТЕКСТ("SELECT * FROM " + ИмяТаблицыСтрокЧека + " WHERE identity_column < " + НомерПервойСтрокиТовара,"НовыеКомандыЧека");
	
//отдельно обработаем позиции чека
ДОБАВИТЬКОНТЕКСТ( "SELECT * FROM " + ИмяТаблицыСтрокЧека + " WHERE operation = 'Регистрация' OR operation = 'Возврат' ORDER BY identity_column", "ПозицииЧека" );
WHILE ( !КОНЕЦКОНТЕКСТА( "ПозицииЧека" ) )
{
	КоличествоТовара	= VAL( ПозицииЧека.quantity );
	СуммаТовара			= VAL( ПозицииЧека.summa );
	СуммаСкидкиПозиции	= VAL( ПозицииЧека.discountvalue );
	Наименование		= ПозицииЧека.name;
	_Цена_Учет			= VAL( ПозицииЧека._price_u );
	СекцияККМ			= ПозицииЧека.department;
	КодНалога			= ПозицииЧека.kodn;
	ПредметРасчета		= ПозицииЧека.rsubject;
	СпособРасчета		= ПозицииЧека.rvariant;
	ПарольОперации		= ПозицииЧека.password;
	ИмяОперации			= ПозицииЧека.operation;
	ТипМаркировки		= ПозицииЧека.marktype;
	ШтрихКодМаркировки	= ПозицииЧека.markbc;
	ВерсияФФД			= ПозицииЧека.ffd_version;
	РезультатПроверкиКМ = ПозицииЧека.kmcheckresult;
	ЦенаТоварнойПозиции	= VAL( ПозицииЧека.price );
	
	ШтрихКодМаркировкиНовый = "";		
	
	
	//если не вся скидка распределилась и есть остаток, то уменьшим на этот остаток сумму первой позиции	
	//IF ( !ЭТОРМК )
	//{
		
		ОстатокОтСуммыРасчетной = ROUND( _ВСЕГОСУММАЧЕКАРАСЧЕТНАЯ + VAL( ПЕРЕМЕННАЯ( "_ВСЕГООПЛАТАБОНУСАМИ", 0) ) - СУММАОПЛАТЫ, 2 );
		
		IF ( _ВСЕГОСУММАЧЕКАРАСЧЕТНАЯ <> 0 AND ОстатокОтСуммыРасчетной <> 0 )
		{
			//уменьшамем сумму на остаток скидки
			СуммаТовара = ROUND( СуммаТовара - ОстатокОтСуммыРасчетной, 2);
			//так же изменим сумму скидки на позицию на величину остатка скидки
			СуммаСкидкиПозиции = СуммаСкидкиПозиции + ОстатокОтСуммыРасчетной;
			_ВСЕГОСУММАЧЕКАРАСЧЕТНАЯ = 0.000; //остаток обнуляем, чтобы не применился к остальным позициям
			ОстатокОтСуммыРасчетной = 0.000;
		}
	//}	
	
	ПозицияРазделителяСлева = 0;
	//форматно-логический контроль
	IF (КоличествоТовара <> 1)
	{
		// Получаем расчетную цену с учетом скидок делением входящей суммы на входящее количество.
		РасчетнаяЦена = ROUND( СуммаТовара / КоличествоТовара, 2);
		// Здесь и далее все цены и суммы округляем до 2 знаков после запятой, количества - до 3 знаков.
		// Умножаем входящее количество  на расчетную цену и получаем новую промежуточную сумму.
		НоваяСумма = ROUND( КоличествоТовара * РасчетнаяЦена, 2 );
		// Вычисляем разницу между промежуточной и входящей суммой.
		РазницаСумм = НоваяСумма - СуммаТовара;
		// Если разница допустима или разницы нет - оставляем одну строку.
		IF (РазницаСумм < -1*ДопустимоеРасхождениеФЛК OR РазницаСумм > ДопустимоеРасхождениеФЛК)
		{
			//Иначе, если разница есть и превышает допустимый предел, то разделяем товарную позицию
			
			// Запоминаем начальные значения.
			ТекущееКоличество = ROUND( КоличествоТовара, 3 );
			ТекущаяСкидка = СуммаСкидкиПозиции;
			//ТекущаяСуммаНДС = summands;
			
			// Если разница есть, то ее делим на копейку.
			// Получаем количество, которое нужно переоценить.
			КоличествоПереоценки = ROUND( РазницаСумм / 0.01, 3 );
			IF ( КоличествоПереоценки < 0 )
				КоличествоПереоценки = -1*КоличествоПереоценки;
			
			// Цена переоценки во всех примерах отличается от расчетной на 1 копейку.
			// В  большую или меньшую сторону в зависимости от знака разницы - зависимость обратная.
			ЦенаПереоценки = РасчетнаяЦена - ROUND( РазницаСумм / КоличествоПереоценки, 2 );
			
			// Из начального количества отнимаем количество переоценки.
			// Получаем количество, которое остается по расчетной цене.
			КоличествоНовое	= КоличествоТовара - КоличествоПереоценки;
			СуммаНовая		= ROUND( КоличествоНовое * РасчетнаяЦена, 2 );
			
			// Распределяем суммы скидок и НДС пропорционально количеству.
			// Если суммы есть. А если их нет, то должно остаться нулевое значение.			
			СуммаСкидокПереоценки = 0;
						
			IF ( !ПУСТО(ТекущаяСкидка) )
			{
				IF ( КоличествоПереоценки > КоличествоНовое )
				{
					СуммаСкидокПереоценки = ROUND(ТекущаяСкидка * КоличествоПереоценки / КоличествоТовара, 2 );
					СуммаСкидокРасчетная = ТекущаяСкидка - СуммаСкидокПереоценки;
				}
				ELSE
				{
					СуммаСкидокРасчетная = ROUND(ТекущаяСкидка * КоличествоНовое / КоличествоТовара, 2);
					СуммаСкидокПереоценки = ТекущаяСкидка - СуммаСкидокРасчетная;
				}
			}
			
			СуммаСкидокНовая = ТекущаяСкидка - СуммаСкидокПереоценки;
			//СуммаСкидокНовая = 0;
			
			//IF ( !ПУСТО(ТекущаяСуммаНДС) )
			//	СуммаНДСПереоценки = VAL( STR( ТекущаяСуммаНДС * КоличествоПереоценки / ТекущееКоличество, 10, 2 ) );
			
			//IF ( !ПУСТО(ТекущаяСуммаНДС) )
			//	СуммаНДСНовая = ТекущаяСуммаНДС - СуммаНДСПереоценки;				
				
			
			// Выводим вместо первоначальной строки две новых.
			// Сначала с расчетной ценой и остатком количества.
			// И суммой - произведение цены и количества.
			
			//получить часть штрихкодов маркировки, если позиция маркированная и с несколькими марками
			IF ( !ПУСТО(ШтрихКодМаркировки) AND VAL(ТипМаркировки) <> 0 )
			{
				КоличествоШКМаркировки = 1;
				РазделительМарок 	= "|";
				ШтрихКодМаркировкиВрем	= РазделительМарок + ШтрихКодМаркировки;
				WHILE (КоличествоШКМаркировки <= КоличествоНовое)
				{						
					Марка				= ПОЛУЧИТЬСЛОВО( ШтрихКодМаркировкиВрем, РазделительМарок, КоличествоШКМаркировки );
					ШтрихКодМаркировкиНовый += ЕСЛИ( !ПУСТО(ШтрихКодМаркировкиНовый), "|", "") + Марка;
					КоличествоШКМаркировки++;
				}
			}
			
			/*
			ПозицияРазделителяСлева = AT( ШтрихКодМаркировки, "|", КоличествоНовое );
			IF ( ПозицияРазделителяСлева == 0 )
				ПозицияРазделителяСлева = LEN( ШтрихКодМаркировки );
				
			ШтрихКодМаркировкиНовый = LEFT( ШтрихКодМаркировки, ПозицияРазделителяСлева );
			IF ( ПРАВСИМВ( ШтрихКодМаркировкиНовый, 1 ) == "|" )
				ШтрихКодМаркировкиНовый = LEFT( ШтрихКодМаркировкиНовый, LEN( ШтрихКодМаркировкиНовый ) - 1 );
			*/
			
			ДОБАВИТЬСТРОКИ(1, "НовыеКомандыЧека");
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "operation", ИмяОперации);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "password", ПарольОперации);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "mode", "1");
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "checktype", "0");
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "name", Наименование);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "quantity", КоличествоНовое );
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "price", РасчетнаяЦена );
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "_price_u", _Цена_Учет );
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "summa", СуммаНовая );
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "destination", 0);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "department", ЕСЛИ( ПУСТО( СекцияККМ ), 1, СекцияККМ ));
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "discounttype", 0);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "discountvalue", СуммаСкидокНовая );
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "kodn", КодНалога);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "rsubject", ПредметРасчета);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "rvariant", СпособРасчета);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "marktype", ТипМаркировки);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "markbc",  ШтрихКодМаркировкиНовый);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "ffd_version",  ВерсияФФД);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "kmcheckresult",  РезультатПроверкиКМ);
			
			/*
			//отладка
				СООБЩЕНИЕ("Добавлена позиция: " + CHR(13) + CHR(10) + 
				"Наименование = " + Наименование + CHR(13) + CHR(10) + 
				"Количество = " + STR( КоличествоНовое, 15, 3 ) + CHR(13) + CHR(10) + 
				"Цена = " + STR( РасчетнаяЦена, 15, 3 ) + CHR(13) + CHR(10) + 
				"Сумма = " + STR( СуммаНовая, 15, 3 ) + CHR(13) + CHR(10) + 
				"Скидка = " + STR( СуммаСкидокНовая, 15, 3 ) + CHR(13) + CHR(10) + 
				"ТипМаркировки = " + ТипМаркировки + CHR(13) + CHR(10) + 
				"ШтрихКодМаркировки = " + ШтрихКодМаркировкиНовый);				
			//конец отладки
			*/
			
			// Потом с переоцененной ценой и переоцененным количеством.
			// И суммой - произведение цены и количества.
			// Пересчитаем данные для второй позиции
			КоличествоТовара	= КоличествоПереоценки;
			ЦенаТоварнойПозиции	= ЦенаПереоценки;
			СуммаТовара			= ROUND( КоличествоПереоценки * ЦенаПереоценки, 2 );
			
			IF ( !ПУСТО(ТекущаяСкидка) )
				СуммаСкидкиПозиции = СуммаСкидокПереоценки;
			
			//IF ( !ПУСТО(ТекущаяСуммаНДС) )
			//	СуммаНДСПозиции = СуммаНДСПереоценки;
				
			СуммаСкидкиПозиции = 0;	
		}
	}
	
	ШтрихКодМаркировкиОстаток = RIGHT( ШтрихКодМаркировки, LEN( ШтрихКодМаркировки ) - LEN( ШтрихКодМаркировкиНовый ) );
	IF ( ЛЕВСИМВ( ШтрихКодМаркировкиОстаток, 1 ) == "|" )
		ШтрихКодМаркировкиОстаток = RIGHT( ШтрихКодМаркировкиОстаток, LEN( ШтрихКодМаркировкиОстаток ) - 1 );
	IF ( ПРАВСИМВ( ШтрихКодМаркировкиНовый, 1 ) == "|" )
		ШтрихКодМаркировкиОстаток = LEFT( ШтрихКодМаркировкиОстаток, LEN( ШтрихКодМаркировкиОстаток ) - 1 );	
	
	//добавляем строку		
	ДОБАВИТЬСТРОКИ(1, "НовыеКомандыЧека");
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "operation", ИмяОперации);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "password", ПарольОперации);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "mode", "1");
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "checktype", "0");
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "name", Наименование);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "quantity", КоличествоТовара );
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "price", ЦенаТоварнойПозиции );
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "_price_u", _Цена_Учет );
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "summa", СуммаТовара );
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "destination", 0);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "department", ЕСЛИ( ПУСТО( СекцияККМ ), 1, СекцияККМ ));
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "discounttype", 0);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "discountvalue", СуммаСкидкиПозиции );
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "kodn", КодНалога);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "rsubject", ПредметРасчета);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "rvariant", СпособРасчета);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "marktype", ТипМаркировки);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "markbc", ШтрихКодМаркировкиОстаток);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "ffd_version",  ВерсияФФД);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "kmcheckresult",  РезультатПроверкиКМ);
	//\\конец форматно-логического контроля		
	
	/*
	//отладка
		СООБЩЕНИЕ("Изменена позиция: " + CHR(13) + CHR(10) + 
		"Наименование = " + Наименование + CHR(13) + CHR(10) + 
		"Количество = " + STR( КоличествоТовара, 15, 3 ) + CHR(13) + CHR(10) + 
		"Цена = " + STR( ЦенаТоварнойПозиции, 15, 3 ) + CHR(13) + CHR(10) + 
		"Сумма = " + STR( СуммаТовара, 15, 3 ) + CHR(13) + CHR(10) + 
		"Скидка = " + STR( СуммаСкидкиПозиции, 15, 3 ) + CHR(13) + CHR(10) + 
		"ТипМаркировки = " + ТипМаркировки + CHR(13) + CHR(10) + 
		"ШтрихКодМаркировки = " + ШтрихКодМаркировкиОстаток);				
	//конец отладки
	*/
	
	
	//обнуление переменных
	КоличествоТовара	= 0.000;
	СуммаТовара			= 0.000;
	СуммаСкидкиПозиции	= 0.000;	
	_Цена_Учет			= 0.000;	
	ЦенаТоварнойПозиции	= 0.000;		
	//\	
	ПРОПУСТИТЬ( 1, "ПозицииЧека" );
}
УДАЛИТЬКОНТЕКСТ("ПозицииЧека");

//копируем все команды, располагающиеся после последней строки товаров в новую таблицу команд чека
ДОБАВИТЬКОНТЕКСТ("SELECT * FROM " + ИмяТаблицыСтрокЧека + " WHERE identity_column > " + НомерПоследнейСтрокиТовара,"ПоследниеКомандыЧека");
	
//теперь удалим все строки из таблицы позиций
ЗАПРОС("DELETE FROM " + ИмяТаблицыСтрокЧека);

//и загрузим в неё данные из сформированных контекстов
ВЫГРУЗИТЬ(ИмяТаблицыСтрокЧека,"","identity_column","НовыеКомандыЧека");
ВЫГРУЗИТЬ(ИмяТаблицыСтрокЧека,"","identity_column","ПоследниеКомандыЧека");

УДАЛИТЬКОНТЕКСТ("НовыеКомандыЧека");
УДАЛИТЬКОНТЕКСТ("ПоследниеКомандыЧека");

RETURN true;
