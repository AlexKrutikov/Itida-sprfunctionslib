//вычислим номер первой строки с товарной позицией
НомерПервойСтрокиТовара = ЗАПРОС("SELECT TOP 1 identity_column FROM " + ИмяТаблицыСтрокЧека + " WHERE operation = 'Регистрация' OR operation = 'Возврат' ORDER BY identity_column ASC");
//вычислим номер последней строки с товарной позицией
НомерПоследнейСтрокиТовара = ЗАПРОС("SELECT TOP 1 identity_column FROM " + ИмяТаблицыСтрокЧека + " WHERE operation = 'Регистрация' OR operation = 'Возврат' ORDER BY identity_column DESC");
	


//копируем все команды, располагающиеся до первой строки товаров в новую таблицу команд чека
ДОБАВИТЬКОНТЕКСТ("SELECT * FROM " + ИмяТаблицыСтрокЧека + " WHERE identity_column < " + НомерПервойСтрокиТовара,"НовыеКомандыЧека");
	
//отдельно обработаем позиции чека
ДОБАВИТЬКОНТЕКСТ( "SELECT * FROM " + ИмяТаблицыСтрокЧека + " WHERE operation = 'Регистрация' OR operation = 'Возврат' ORDER BY identity_column", "ПозицииЧека" );
WHILE ( !КОНЕЦКОНТЕКСТА( "ПозицииЧека" ) )
{
	КоличествоТовара	= ПозицииЧека.quantity;
	СуммаТовара			= ПозицииЧека.summa;
	СуммаСкидкиПозиции	= ПозицииЧека.discountvalue;
	Наименование		= ПозицииЧека.name;
	_Цена_Учет			= ПозицииЧека._price_u;
	СекцияККМ			= ПозицииЧека.department;
	КодНалога			= ПозицииЧека.kodn;
	ПредметРасчета		= ПозицииЧека.rsubject;
	СпособРасчета		= ПозицииЧека.rvariant;
	ПарольОперации		= ПозицииЧека.password;
	ИмяОперации			= ПозицииЧека.operation;
	ТипМаркировки		= ПозицииЧека.marktype;
	ШтрихКодМаркировки	= ПозицииЧека.markbc;
	ВерсияФФД			= ПозицииЧека.ffd_version;
	
	ШтрихКодМаркировкиНовый = "";		
	
	/*
	СООБЩЕНИЕ("_ВСЕГОСКИДКАНАЧЕК = " + _ВСЕГОСКИДКАНАЧЕК + CHR(13) + CHR(10) +
	"_ВСЕГООПЛАТАБОНУСАМИ = " + _ВСЕГООПЛАТАБОНУСАМИ);
	*/
	
	//если не вся скидка распределилась и есть остаток, то уменьшим на этот остаток сумму первой позиции
	IF ( VAL( _ВСЕГОСКИДКАНАЧЕК ) <> 0 ) //AND КоличествоТовара >= 1 )
	{
		IF ( _ВСЕГОСКИДКАНАЧЕК >= _ВСЕГООПЛАТАБОНУСАМИ )
		{
			//уменьшим сумму скидки на сумму оплаты бонусами (чтобы бонусы не мешали расчету скидок на позиции)
			_ВСЕГОСКИДКАНАЧЕК  = _ВСЕГОСКИДКАНАЧЕК - _ВСЕГООПЛАТАБОНУСАМИ;
		}
		//уменьшамем сумму на остаток скидки
		СуммаТовара = ROUND( СуммаТовара + _ВСЕГОСКИДКАНАЧЕК, 2);
		//так же изменим сумму скидки на позицию на величину остатка скидки
		СуммаСкидкиПозиции = СуммаСкидкиПозиции - _ВСЕГОСКИДКАНАЧЕК;
		_ВСЕГОСКИДКАНАЧЕК = 0; //остаток обнуляем, чтобы не применился к остальным позициям
	}
	
	ПозицияРазделителяСлева = 0;
	//форматно-логический контроль
	IF (КоличествоТовара > 1)
	{
		ДопустимоеРасхождение = 0.01; // В соответствии с текущей версией 54-ФЗ
		СумаПозиции = СуммаТовара; //- СуммаСкидкиПозиции;//КоличествоТовара * ЦенаТоварнойПозиции;
		// Получаем расчетную цену с учетом скидок делением входящей суммы на входящее количество.
		РасчетнаяЦена = ROUND( СумаПозиции / КоличествоТовара - 0.004, 2);
		// Здесь и далее все цены и суммы округляем до 2 знаков после запятой, количества - до 3 знаков.
		// Умножаем входящее количество  на расчетную цену и получаем новую промежуточную сумму.
		//для дробного количества, чтобы расчеты были точнее, не вычетаем 0.004 для округления в меньшую сторону
		НоваяСумма = ROUND( КоличествоТовара * РасчетнаяЦена - IIF( ROUND( КоличествоТовара, 0 ) <> КоличествоТовара, 0, 0.004), 2 );
		// Вычисляем разницу между промежуточной и входящей суммой.
		РазницаСумм = НоваяСумма - СумаПозиции;
		// Если разница допустима или разницы нет - оставляем одну строку.
		IF (РазницаСумм <= -1*ДопустимоеРасхождение OR РазницаСумм >= ДопустимоеРасхождение)
		{
			//Иначе, если разница есть и превышает допустимый предел, то разделяем товарную позицию
			
			// Запоминаем начальные значения.
			ТекущееКоличество = КоличествоТовара;
			ТекущаяСкидка = СуммаСкидкиПозиции;
			//ТекущаяСуммаНДС = summands;
			
			// Если разница есть, то ее делим на копейку.
			// Получаем количество, которое нужно переоценить.
			КоличествоПереоценки = ROUND( РазницаСумм / 0.01, 3 );
			IF ( КоличествоПереоценки < 0 )
				КоличествоПереоценки = -1*КоличествоПереоценки;
			
			// Цена переоценки во всех примерах отличается от расчетной на 1 копейку.
			// В  большую или меньшую сторону в зависимости от знака разницы - зависимость обратная.
			ЦенаПереоценки = РасчетнаяЦена - ROUND( РазницаСумм / КоличествоПереоценки - 0.004, 2 );
			
			// Распределяем суммы скидок и НДС пропорционально количеству.
			// Если суммы есть. А если их нет, то должно остаться нулевое значение.
			
			IF ( !ПУСТО(ТекущаяСкидка) )
				СуммаСкидокПереоценки = ROUND( ТекущаяСкидка * КоличествоПереоценки / ТекущееКоличество - 0.004, 2 );
				
			//IF ( !ПУСТО(ТекущаяСуммаНДС) )
			//	СуммаНДСПереоценки = VAL( STR( ТекущаяСуммаНДС * КоличествоПереоценки / ТекущееКоличество, 10, 2 ) );
			
			// Из начального количества отнимаем количество переоценки.
			// Получаем количество, которое остается по расчетной цене.
			КоличествоНовое	= КоличествоТовара - КоличествоПереоценки;
			СуммаНовая		= ROUND( КоличествоНовое * РасчетнаяЦена - 0.004, 2 );
			
			IF ( !ПУСТО(ТекущаяСкидка) )
				СуммаСкидокНовая = ТекущаяСкидка - СуммаСкидокПереоценки;
				
			//IF ( !ПУСТО(ТекущаяСуммаНДС) )
			//	СуммаНДСНовая = ТекущаяСуммаНДС - СуммаНДСПереоценки;
				
				
			СуммаСкидокНовая = 0;
			// Выводим вместо первоначальной строки две новых.
			// Сначала с расчетной ценой и остатком количества.
			// И суммой - произведение цены и количества.
			
			//получить часть штрихкодов маркировки, если позиция маркированная и с несколькими марками
			IF ( !ПУСТО(ШтрихКодМаркировки) AND VAL(ТипМаркировки) <> 0 )
			{
				КоличествоШКМаркировки = 1;
				РазделительМарок 	= "|";
				ШтрихКодМаркировкиВрем	= РазделительМарок + ШтрихКодМаркировки;
				WHILE (КоличествоШКМаркировки <= КоличествоНовое)
				{						
					Марка				= ПОЛУЧИТЬСЛОВО( ШтрихКодМаркировкиВрем, РазделительМарок, КоличествоШКМаркировки );
					ШтрихКодМаркировкиНовый += ЕСЛИ( !ПУСТО(ШтрихКодМаркировкиНовый), "|", "") + Марка;
					КоличествоШКМаркировки++;
				}
			}
			
			/*
			ПозицияРазделителяСлева = AT( ШтрихКодМаркировки, "|", КоличествоНовое );
			IF ( ПозицияРазделителяСлева == 0 )
				ПозицияРазделителяСлева = LEN( ШтрихКодМаркировки );
				
			ШтрихКодМаркировкиНовый = LEFT( ШтрихКодМаркировки, ПозицияРазделителяСлева );
			IF ( ПРАВСИМВ( ШтрихКодМаркировкиНовый, 1 ) == "|" )
				ШтрихКодМаркировкиНовый = LEFT( ШтрихКодМаркировкиНовый, LEN( ШтрихКодМаркировкиНовый ) - 1 );
			*/
			
			ДОБАВИТЬСТРОКИ(1, "НовыеКомандыЧека");
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "operation", ИмяОперации);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "password", ПарольОперации);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "mode", "1");
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "checktype", "0");
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "name", Наименование);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "quantity", STR( КоличествоНовое, 16, 3 ));
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "price", STR( РасчетнаяЦена, 16, 2 ));
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "_price_u", STR( _Цена_Учет, 16, 2 ));
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "summa", STR( СуммаНовая, 16, 2 ));
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "destination", 0);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "department", ЕСЛИ( ПУСТО( СекцияККМ ), 1, СекцияККМ ));
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "discounttype", 0);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "discountvalue", STR( СуммаСкидокНовая, 16, 3 ));
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "kodn", КодНалога);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "rsubject", ПредметРасчета);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "rvariant", СпособРасчета);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "marktype", ТипМаркировки);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "markbc",  ШтрихКодМаркировкиНовый);
			ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "ffd_version",  ВерсияФФД);
			
			/*
			//отладка
				СООБЩЕНИЕ("Добавлена позиция: " + CHR(13) + CHR(10) + 
				"Наименование = " + Наименование + CHR(13) + CHR(10) + 
				"Количество = " + КоличествоНовое + CHR(13) + CHR(10) + 
				"Цена = " + РасчетнаяЦена + CHR(13) + CHR(10) + 
				"Сумма = " + СуммаНовая + CHR(13) + CHR(10) + 
				"Скидка = " + СуммаСкидокНовая + CHR(13) + CHR(10) + 
				"ТипМаркировки = " + ТипМаркировки + CHR(13) + CHR(10) + 
				"ШтрихКодМаркировки = " + ШтрихКодМаркировкиНовый);				
			//конец отладки
			*/
			
			// Потом с переоцененной ценой и переоцененным количеством.
			// И суммой - произведение цены и количества.
			// Пересчитаем данные для второй позиции
			КоличествоТовара	= КоличествоПереоценки;
			ЦенаТоварнойПозиции	= ЦенаПереоценки;
			СуммаТовара			= VAL( STR( КоличествоПереоценки * ЦенаПереоценки, 10, 2 ) );
			
			IF ( !ПУСТО(ТекущаяСкидка) )
				СуммаСкидкиПозиции = СуммаСкидокПереоценки;
			
			//IF ( !ПУСТО(ТекущаяСуммаНДС) )
			//	СуммаНДСПозиции = СуммаНДСПереоценки;
				
			СуммаСкидкиПозиции = 0;	
		}
	}
	
	ШтрихКодМаркировкиОстаток = RIGHT( ШтрихКодМаркировки, LEN( ШтрихКодМаркировки ) - LEN( ШтрихКодМаркировкиНовый ) );
	IF ( ЛЕВСИМВ( ШтрихКодМаркировкиОстаток, 1 ) == "|" )
		ШтрихКодМаркировкиОстаток = RIGHT( ШтрихКодМаркировкиОстаток, LEN( ШтрихКодМаркировкиОстаток ) - 1 );
	IF ( ПРАВСИМВ( ШтрихКодМаркировкиНовый, 1 ) == "|" )
		ШтрихКодМаркировкиОстаток = LEFT( ШтрихКодМаркировкиОстаток, LEN( ШтрихКодМаркировкиОстаток ) - 1 );	
	
	//добавляем строку		
	ДОБАВИТЬСТРОКИ(1, "НовыеКомандыЧека");
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "operation", ИмяОперации);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "password", ПарольОперации);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "mode", "1");
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "checktype", "0");
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "name", Наименование);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "quantity", STR( КоличествоТовара, 16, 3 ));
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "price", STR( ЦенаТоварнойПозиции, 16, 2 ));
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "_price_u", STR( _Цена_Учет, 16, 2 ));
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "summa", STR( СуммаТовара, 16, 2 ));
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "destination", 0);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "department", ЕСЛИ( ПУСТО( СекцияККМ ), 1, СекцияККМ ));
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "discounttype", 0);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "discountvalue", STR( СуммаСкидкиПозиции, 16, 3 ));
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "kodn", КодНалога);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "rsubject", ПредметРасчета);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "rvariant", СпособРасчета);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "marktype", ТипМаркировки);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "markbc", ШтрихКодМаркировкиОстаток);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "ffd_version",  ВерсияФФД);
	//\\конец форматно-логического контроля		
	
	/*
	//отладка
		СООБЩЕНИЕ("Добавлена позиция: " + CHR(13) + CHR(10) + 
		"Наименование = " + Наименование + CHR(13) + CHR(10) + 
		"Количество = " + КоличествоТовара + CHR(13) + CHR(10) + 
		"Цена = " + ЦенаТоварнойПозиции + CHR(13) + CHR(10) + 
		"Сумма = " + СуммаТовара + CHR(13) + CHR(10) + 
		"Скидка = " + СуммаСкидкиПозиции + CHR(13) + CHR(10) + 
		"ТипМаркировки = " + ТипМаркировки + CHR(13) + CHR(10) + 
		"ШтрихКодМаркировки = " + ШтрихКодМаркировкиОстаток);				
	//конец отладки
	*/
	
	ПРОПУСТИТЬ( 1, "ПозицииЧека" );
}
УДАЛИТЬКОНТЕКСТ("ПозицииЧека");

//копируем все команды, располагающиеся после последней строки товаров в новую таблицу команд чека
ДОБАВИТЬКОНТЕКСТ("SELECT * FROM " + ИмяТаблицыСтрокЧека + " WHERE identity_column > " + НомерПоследнейСтрокиТовара,"ПоследниеКомандыЧека");
	
//теперь удалим все строки из таблицы позиций
ЗАПРОС("DELETE FROM " + ИмяТаблицыСтрокЧека);

//и загрузим в неё данные из сформированных контекстов
ВЫГРУЗИТЬ(ИмяТаблицыСтрокЧека,"","identity_column","НовыеКомандыЧека");
ВЫГРУЗИТЬ(ИмяТаблицыСтрокЧека,"","identity_column","ПоследниеКомандыЧека");

RETURN true;
