//сперва очистим результаты предыдущей проверки
//ФР.АТОЛДТО10_ОчиститьТаблицуПроверенныхКМ( ФР.КОДОБОРУДОВАНИЯ() );

ТипОперацииЧека = ПЕРЕМЕННАЯ("ОПЕРАЦИЯ", "ПРОДАЖА");
IF ( !ВСПИСКЕ(ТипОперацииЧека, 1, 2, "ПРОДАЖА", "ВОЗВРАТ") ) 
	RETURN true;
	
РезультатПроверкиКМ = "";
СтрокиМассиваКМ = "";	
//отдельно обработаем позиции чека
ДОБАВИТЬКОНТЕКСТ( "SELECT * FROM " + ИмяТаблицыСтрокЧека + " WHERE operation = 'Регистрация' OR operation = 'Возврат' ORDER BY identity_column", "ПозицииЧека" );
WHILE ( !КОНЕЦКОНТЕКСТА( "ПозицииЧека" ) )
{
	КоличествоТовара	= ПозицииЧека.quantity;
	СуммаТовара			= ПозицииЧека.summa;
	СуммаСкидкиПозиции	= ПозицииЧека.discountvalue;
	Наименование		= ПозицииЧека.name;
	_Цена_Учет			= ПозицииЧека._price_u;
	СекцияККМ			= ПозицииЧека.department;
	КодНалога			= ПозицииЧека.kodn;
	ПредметРасчета		= ПозицииЧека.rsubject;
	СпособРасчета		= ПозицииЧека.rvariant;
	ПарольОперации		= ПозицииЧека.password;
	ИмяОперации			= ПозицииЧека.operation;
	ТипМаркировки		= ПозицииЧека.marktype;
	ШтрихКодМаркировки	= ALLTRIM(ПозицииЧека.markbc);
	ВерсияФФД			= ПозицииЧека.ffd_version;
	
	IF ( !ПУСТО( ШтрихКодМаркировки ) )
	{
		JSONПроверяемыйКМ	= "";
		ТэгТипКодаМаркировки = ДАННЫЕ_JSON("imcType", "auto"); //определить тип КМ автоматически;
		ТэгКодМаркировки = """imc"": """ + ПЕРЕКОДИРОВАТЬ(ШТРИХКОДМАРКИРОВКИ,"","BASE64") + """"; //base64-представление значения кода маркировки (тег 2000)
		ТэгПланируемыйСтатус = ДАННЫЕ_JSON("itemEstimatedStatus", ЕСЛИ( ТипОперацииЧека == "ПРОДАЖА" ИЛИ ТипОперацииЧека == 1, "itemPieceSold", "itemPieceReturn") ); //1 - itemPieceSold - штучный товар, реализован;
																					//2 - itemDryForSale - мерный товар, в стадии реализации;
																					//3 - itemPieceReturn - штучный товар, возвращен;
																					//4 - itemDryReturn - часть товара, возвращена;
																					//255 - itemStatusUnchanged - статус товара, не изменился;
		ТэгРежимОбработкиКМ = ДАННЫЕ_JSON("imcModeProcessing", 0); //Режим обработки кода товара (тег 2102)
		//ТэгДробноеКоличествоТовара = ДАННЫЕ_JSON("itemFractionalAmount", "1/5"); //Дробное количество маркированного товара (тег 1291). Используется только для КМ в позициях без проверки в чеке
		//ТэгКоличествоТовара = ДАННЫЕ_JSON("itemQuantity", КоличествоТовара); //Количество товара (тег 1023)
		//ТэгМераТовара = ДАННЫЕ_JSON("itemUnits", "piece"); //Мера количества товара (тег 2108). Используется только для проверки КМ
		ЖдатьОтветСервера = ДАННЫЕ_JSON("waitForResult", false); //ждать результата ответа от сервера
		JSONПроверяемыйКМ += "{" + ТэгТипКодаМаркировки + "," + ТэгКодМаркировки + "," + ТэгПланируемыйСтатус + "," + ТэгРежимОбработкиКМ + "," + ЖдатьОтветСервера + "}";
		СтрокиМассиваКМ += ЕСЛИ(!ПУСТО(СтрокиМассиваКМ),",","") + JSONПроверяемыйКМ;
	}	
	
	ПРОПУСТИТЬ( 1, "ПозицииЧека" );
}

ТипЗадания		= ДАННЫЕ_JSON("type", "addMarksToBuffer");
//формируем задание
ТекстЗадания = "{" + ТипЗадания + "," + """params"":[" + СтрокиМассиваКМ + "]}";

fptr.setParam( fptr.LIBFPTR_PARAM_JSON_DATA, ТекстЗадания );
fptr.processJson( );

IF ( !ФР.АТОЛДТО10_ЗакрытьФРСПроверкойНаОшибки("Добавление КМ в чек", false) )
{
	ФР.АТОЛДТО10_ОтключитьККТ();	
	RETURN false;
}

//ОБРАБОТКА РЕЗУЛЬТАТА ЗАДАНИЯ И ЗАПИСЬ В КОНТЕКСТ ПОЗИЦИЙ ЧЕКА
РезультатДобавленияКМВБуфер	= fptr.getParamString( fptr.LIBFPTR_PARAM_JSON_DATA );

ЗАГРУЗИТЬJSON("РезультатДобавленияКМ", РезультатДобавленияКМВБуфер, "data");
ВЫБРАТЬКОНТЕКСТ("РезультатДобавленияКМ");
WHILE (!КОНЕЦКОНТЕКСТА("РезультатДобавленияКМ"))
{
	ОшибкиДрайвера = ПОЛЕ_JSON(ДанныеФоновойПроверки, "driverError", "");
	КодОшибки = ПОЛЕ_JSON(ОшибкиДрайвера, "code", 0);
	ОписаниеОшибки = ПОЛЕ_JSON(ОшибкиДрайвера, "description", "");
	КраткоеНазваниеОшибки = ПОЛЕ_JSON(ОшибкиДрайвера, "error", "");
	
	//сперва обработаем драйверные ошибки, т.к. могли не соединиться с ККТ или с сервером ИСМ, а так же получить прочие ошибки проверки
	IF (VAL(КодОшибки) <> 0)
	{
		ДопОписание = "";
		IF (КраткоеНазваниеОшибки == "imcCheckIsRun")
			ДопОписание = "Процедура проверки уже запущена";
		ELSE IF (КраткоеНазваниеОшибки == "serverNoConnect")
			ДопОписание = "Ошибка связи. Истек таймаут на открытие соединения.";
		ELSE IF (КраткоеНазваниеОшибки == "imcCheckBreak")
			ДопОписание = "Процедура проверки прервана, процедура проверки уже запущена или соединение установлено, но сервер отклонил проверку";
		ELSE IF (КраткоеНазваниеОшибки == "imcCheckWrongState")
			ДопОписание = "Неверное состояние процесса проверки КМ. Проверьте последовательность команд.";
		ELSE IF (КраткоеНазваниеОшибки == "requestTimeout")
			ДопОписание = "Истек таймаут при отправке запроса о КМ на сервер";
		ELSE IF (КраткоеНазваниеОшибки == "responseTimeout")
			ДопОписание = "Истек таймаут при истечении времени ожидания ответа при проверке КМ";			
			
		СООБЩЕНИЕ( "Ошибка " + КодОшибки + " при роверке КМ" + СимволПереноса + "Описание ошибки: " + ОписаниеОшибки + СимволПереноса + "Доп. описание: " + ДопОписание, "Ошибка проверки КМ" );		
		ФР.АТОЛДТО10_ЗакрытьФРСПроверкойНаОшибки( "Проверка КМ", РАЗРЕШИТЬОТКЛЮЧАТЬККТ );
		RETURN false;
	}
	
	НомерТекущейСтроки = НОМЕРСТРОКИ("РезультатДобавленияКМ");
	
	ВЫБРАТЬКОНТЕКСТ("ПозицииЧека");
	ПЕРЕЙТИ(НомерТекущейСтроки, "ПозицииЧека");
	ШТРИХКОДМАРКИРОВКИ = ПозицииЧека.markbc;
	ВЫБРАТЬКОНТЕКСТ("РезультатДобавленияКМ");	
	
	РЕЗУЛЬТАТПРОВЕРКИСВЕДЕНИЙОТОВАРЕ = ПОЛЕ_JSON(РезультатДобавленияКМ.data, "itemInfoCheckResult", ""); //2106
	
	ФР.АТОЛДТО10_ЗаписатьРезультатПроверкиКМВКонтекст(ШТРИХКОДМАРКИРОВКИ, РЕЗУЛЬТАТПРОВЕРКИСВЕДЕНИЙОТОВАРЕ);
	ПРОПУСТИТЬ(1,"РезультатДобавленияКМ");
}
УДАЛИТЬКОНТЕКСТ("РезультатДобавленияКМ");
УДАЛИТЬКОНТЕКСТ("ПозицииЧека");

RETURN true;
