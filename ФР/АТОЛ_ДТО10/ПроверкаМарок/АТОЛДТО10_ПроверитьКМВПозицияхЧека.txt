//подключаемся к ККТ
IF ( !ФР.АТОЛДТО10_ОткрытьФР( КОДОБОРУДОВАНИЯ, "Проверка массива КМ" ) ) RETURN false;

ТипЗадания		= ДАННЫЕ_JSON("type", "validateMarks");
Таймаут			= ДАННЫЕ_JSON("timeout", 5000); //5 секунд

//вычислим номер первой строки с товарной позицией
НомерПервойСтрокиТовара = ЗАПРОС("SELECT TOP 1 identity_column FROM " + ИмяТаблицыСтрокЧека + " WHERE operation = 'Регистрация' OR operation = 'Возврат' ORDER BY identity_column ASC");
//вычислим номер последней строки с товарной позицией
НомерПоследнейСтрокиТовара = ЗАПРОС("SELECT TOP 1 identity_column FROM " + ИмяТаблицыСтрокЧека + " WHERE operation = 'Регистрация' OR operation = 'Возврат' ORDER BY identity_column DESC");
	


//копируем все команды, располагающиеся до первой строки товаров в новую таблицу команд чека
ДОБАВИТЬКОНТЕКСТ("SELECT * FROM " + ИмяТаблицыСтрокЧека + " WHERE identity_column < " + НомерПервойСтрокиТовара,"НовыеКомандыЧека");
	
//отдельно обработаем позиции чека
ДОБАВИТЬКОНТЕКСТ( "SELECT * FROM " + ИмяТаблицыСтрокЧека + " WHERE operation = 'Регистрация' OR operation = 'Возврат' ORDER BY identity_column", "ПозицииЧека" );
WHILE ( !КОНЕЦКОНТЕКСТА( "ПозицииЧека" ) )
{
	КоличествоТовара	= ПозицииЧека.quantity;
	СуммаТовара			= ПозицииЧека.summa;
	СуммаСкидкиПозиции	= ПозицииЧека.discountvalue;
	Наименование		= ПозицииЧека.name;
	_Цена_Учет			= ПозицииЧека._price_u;
	СекцияККМ			= ПозицииЧека.department;
	КодНалога			= ПозицииЧека.kodn;
	ПредметРасчета		= ПозицииЧека.rsubject;
	СпособРасчета		= ПозицииЧека.rvariant;
	ПарольОперации		= ПозицииЧека.password;
	ИмяОперации			= ПозицииЧека.operation;
	ТипМаркировки		= ПозицииЧека.marktype;
	ШтрихКодМаркировки	= ПозицииЧека.markbc;
	ВерсияФФД			= ПозицииЧека.ffd_version;
	
	JSONПроверяемыйКМ	= "";
	ТэгТипКодаМаркировки = ДАННЫЕ_JSON("imcType", "auto"); //определить тип КМ автоматически;
	ТэгКодМаркировки = ДАННЫЕ_JSON("imc", ПЕРЕКОДИРОВАТЬ(ШтрихКодМаркировки,,"BASE64")); //base64-представление значения кода маркировки (тег 2000)
	ТэгПланируемыйСтатус = ДАННЫЕ_JSON("itemEstimatedStatus", "itemPieceSold"); //1 - itemPieceSold - штучный товар, реализован;
																				//2 - itemDryForSale - мерный товар, в стадии реализации;
																				//3 - itemPieceReturn - штучный товар, возвращен;
																				//4 - itemDryReturn - часть товара, возвращена;
																				//255 - itemStatusUnchanged - статус товара, не изменился;
	ТэгРежимОбработкиКМ = ДАННЫЕ_JSON("imcModeProcessing", 0); //Режим обработки кода товара (тег 2102)
	//ТэгДробноеКоличествоТовара = ДАННЫЕ_JSON("itemFractionalAmount", "1/5"); //Дробное количество маркированного товара (тег 1291). Используется только для КМ в позициях без проверки в чеке
	ТэгКоличествоТовара = ДАННЫЕ_JSON("itemQuantity", КоличествоТовара); //Количество товара (тег 1023)
	ТэгМераТовара = ДАННЫЕ_JSON("itemUnits", "piece"); //Мера количества товара (тег 2108). Используется только для проверки КМ
	
	JSONПроверяемыйКМ += "{" + ТэгТипКодаМаркировки + "," + ТэгКодМаркировки + "," + ТэгПланируемыйСтатус + "," + ТэгРежимОбработкиКМ + "," + ТэгКоличествоТовара + "," + ТэгМераТовара + "}";
	
	//формируем задание
	ТекстЗадания = "{" + ТипЗадания + "," + Таймаут + "," + """params"":" + JSONПроверяемыйКМ + "}";


	fptr.setParam( fptr.LIBFPTR_PARAM_JSON_DATA, ТекстЗадания );
	fptr.processJson( );
	
	//ОБРАБОТКА РЕЗУЛЬТАТА ЗАДАНИЯ И ЗАПИСЬ В КОНТЕКСТ ПОЗИЦИЙ ЧЕКА
	РезультатПроверкиКМ = 0;
	
	//добавляем строку		
	ДОБАВИТЬСТРОКИ(1, "НовыеКомандыЧека");
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "operation", ИмяОперации);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "password", ПарольОперации);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "mode", "1");
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "checktype", "0");
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "name", Наименование);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "quantity", STR( КоличествоТовара, 16, 3 ));
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "price", STR( ЦенаТоварнойПозиции, 16, 2 ));
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "_price_u", STR( _Цена_Учет, 16, 2 ));
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "summa", STR( СуммаТовара, 16, 2 ));
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "destination", 0);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "department", ЕСЛИ( ПУСТО( СекцияККМ ), 1, СекцияККМ ));
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "discounttype", 0);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "discountvalue", STR( СуммаСкидкиПозиции, 16, 3 ));
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "kodn", КодНалога);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "rsubject", ПредметРасчета);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "rvariant", СпособРасчета);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "marktype", ТипМаркировки);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "markbc", ШтрихКодМаркировкиОстаток);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "ffd_version",  ВерсияФФД);
	ИЗМЕНИТЬПОЛЕ("НовыеКомандыЧека", "kmcheckresult",  РезультатПроверкиКМ);
	
	
	
	ПРОПУСТИТЬ( 1, "ПозицииЧека" );
}
УДАЛИТЬКОНТЕКСТ("ПозицииЧека");

//копируем все команды, располагающиеся после последней строки товаров в новую таблицу команд чека
ДОБАВИТЬКОНТЕКСТ("SELECT * FROM " + ИмяТаблицыСтрокЧека + " WHERE identity_column > " + НомерПоследнейСтрокиТовара,"ПоследниеКомандыЧека");
	
//теперь удалим все строки из таблицы позиций
ЗАПРОС("DELETE FROM " + ИмяТаблицыСтрокЧека);

//и загрузим в неё данные из сформированных контекстов
ВЫГРУЗИТЬ(ИмяТаблицыСтрокЧека,"","identity_column","НовыеКомандыЧека");
ВЫГРУЗИТЬ(ИмяТаблицыСтрокЧека,"","identity_column","ПоследниеКомандыЧека");

		
RETURN ФР.АТОЛДТО10_ЗакрытьФРСПроверкойНаОшибки( "Проверка массива КМ" );
