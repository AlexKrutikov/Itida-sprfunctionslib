//Чек прихода из РН.
_ИМЯКАССИРА		= ЗАПРОС("SELECT name FROM sprempl WHERE code = " + froperator);
_КАССИР 		= froperator;
ПОЧТА 			= "";
ЭЛЕКТРОННЫЙЧЕК	= false;
ПЕЧАТАТЬКОПИЮ	= false;

IF ( МОДЕЛЬОБОРУДОВАНИЯ == "АТОЛДТО10" )
{
	ФР.АТОЛДТО10_ИнициализацияФР(КодОборудования, НомерУстройства);
}
ELSE IF ( МОДЕЛЬОБОРУДОВАНИЯ == "МЕРКУРИЙ" )
{
	ФР.МЕРКУРИЙФР_ИнициализацияФР(КодОборудования, НомерУстройства);
}
ELSE IF ( МОДЕЛЬОБОРУДОВАНИЯ == "ШТРИХ" )
{
	ФР.ШТРИХ_ИнициализацияФР(КодОборудования, НомерУстройства);
}

ФР.КонстантыДляЧековИзДокументов( );
IF ( !ФР.ПроверкаДокументаПередПечатьюЧека( "006", ИДДокумента ) ) RETURN false;

//Обработка суммы платежа, суммы накладной общей суммы оплат по накладной.
//Рассчитывается как разница между общей суммой оплат и суммой оплаты по данному РКО
//значения по умолчанию для признаков предмета расчета и способа расчета
СпособРасчета 	= 4; //полный расчет
ПредметРасчета	= 1; //товар
ПервыйПлатеж	= true;
ИзлишекОплаты	= 0;
//на выходе получаем товары из спецификации накладной
ЗАПРОС ("INSERT INTO " + ИмяТаблицыТоваров + " ( npp, code, s_code, name, quantity, price, summa, rsubject, rvariant, kodn, department, f_mark, marktype, markbc)
		SELECT row_number() OVER (ORDER BY RIGHT(SPACE(10) + rtrim(npp), 10)),
		nn, s_code, nnname, kolp, cena, summa, 
		(SELECT sprres_g.rsubject FROM sprres 
		 LEFT OUTER JOIN sprres_g ON sprres.group_ = sprres_g.code 
		 WHERE sprres.code = CASE WHEN spec.nn = '' THEN spec.s_code ELSE spec.nn END),
		" + СпособРасчета + ", (SELECT TOP 1 sprkod.code FROM sprkodn sprkod 
								INNER JOIN speclistkodn specn ON specn.list = sprkod.code AND specn.date <= GETDATE()
								INNER JOIN sprlistkodn sprlist ON sprlist.code = specn.code
								WHERE sprlist.code = kodn
								ORDER BY specn.date DESC),
		(SELECT kkm_section FROM sprres_g sprres_g
		 INNER JOIN sprres sprres ON sprres.group_ = sprres_g.code
		 WHERE sprres.code = CASE WHEN spec.nn <> '' THEN spec.nn ELSE spec.s_code END ),
		 (SELECT f_mark FROM sprres sprres WHERE sprres.code = CASE WHEN spec.nn <> '' THEN spec.nn ELSE spec.s_code END ),
		 (SELECT markgroup FROM sprres sprres WHERE sprres.code = CASE WHEN spec.nn <> '' THEN spec.nn ELSE spec.s_code END ),
		 dbo.fn_getmarklist( '" + КодДокумента + "', " + ИДДокумента + ", identity_column, '|' )
		FROM spec" + КодДокумента + " spec
		WHERE ic = " + ИДДокумента);
		
//открываем чек возврата
ТипЧека			= 1;
IF ( МОДЕЛЬОБОРУДОВАНИЯ == "АТОЛДТО10" )
	ТипЧекаФР 		= ФР.АТОЛДТО10_ПолучитьКодВидаЧекаВККМ( ТипЧека, false ); 
ELSE IF ( МОДЕЛЬОБОРУДОВАНИЯ == "МЕРКУРИЙ" )
	ТипЧекаФР 		= ФР.МЕРКУРИЙФР_ПолучитьКодВидаЧекаВККМ( ТипЧека, false ); 	
ELSE IF ( МОДЕЛЬОБОРУДОВАНИЯ == "ШТРИХ" )
	ТипЧекаФР		= ФР.ШТРИХ_ПолучитьКодВидаЧекаВККМ( ТипЧека, false );	
	
ЗАПРОС( "INSERT INTO " + ИмяТаблицыСтрокЧека + " ( operation, password, mode, checktype, name, quantity, price, destination, echeque, clientcode )
	 VALUES ( 'Открыть чек', '" + STDF( FROperatorProfile )+ "', 1, '" + ТипЧекаФР + "', '', 0, 0, 0, " + ЕСЛИ( ЭЛЕКТРОННЫЙЧЕК, "1", "0" ) + ", '" + КОНТРАГЕНТ + "' )" );
	 
//перенесем строки из таблицы товаров в контекст
ДОБАВИТЬКОНТЕКСТ("SELECT * FROM " + ИмяТаблицыТоваров, "СписокТоваров");
WHILE ( !КОНЕЦКОНТЕКСТА( "СписокТоваров" ) )
{
	//проверка и форматно-логический контроль
	НомерПП				= СписокТоваров.npp;
	КодТовара			= СписокТоваров.code;
	КодУслуги			= СписокТоваров.s_code;
	Наименование		= СписокТоваров.name;
	КоличествоТовара	= СписокТоваров.quantity;
	СуммаТовара			= СписокТоваров.summa;
	ЦенаТоварнойПозиции = СписокТоваров.price;
	СуммаСкидкиПозиции	= 0; //скидки из документов не обрабатываем, берем готовые суммы продажи
	СекцияККМ			= СписокТоваров.department;
	МаркированныйТовар	= СписокТоваров.f_mark;
	ТипМаркировки		= СписокТоваров.marktype;
	ШтрихкодМаркировки	= СписокТоваров.markbc;
	//НДС
	КодНалогаАйтида		= СписокТоваров.kodn;
	КодНалогаККМ		= ЗАПРОС("SELECT ex_code FROM sprkodn WHERE code = '" + КодНалогаАйтида + "'");
	IF ( !ПУСТО( КодНалогаККМ ) AND _ОПРЕДЕЛЯТЬКОДЫНАЛОГОВ )
	{
		//берем код налога из карточки налоговой ставки
		КодНалога		= КодНалогаККМ;
	}
	ELSE
	{
		//заполняем стандартными значениями
		IF ( МОДЕЛЬОБОРУДОВАНИЯ == "АТОЛДТО10" )
			КодНалога		= ФР.АТОЛДТО10_ПолучитьНалогККМПоТипуНалога( КодНалогаАйтида );
		ELSE IF ( МОДЕЛЬОБОРУДОВАНИЯ == "МЕРКУРИЙ" )
			КодНалога		= ФР.МЕРКУРИЙФР_ПолучитьНалогККМПоТипуНалога( КодНалогаАйтида );
		ELSE IF ( МОДЕЛЬОБОРУДОВАНИЯ == "ШТРИХ" )
			КодНалога		= ФР.ШТРИХ_ПолучитьНалогККМПоТипуНалога( КодНалогаАйтида );	
			
	}
	
	ПРПозиции	= СписокТоваров.rsubject;
	СРПозиции	= СписокТоваров.rvariant;
	
	IF (ПУСТО(ПРПозиции) AND !ПУСТО(КодТовара))
		ПРПозиции = 1; //товар
		
	IF (ПУСТО(ПРПозиции) AND !ПУСТО(КодУслуги))
		ПРПозиции = 4; //услуга
	
	ПредметРасчетаПозиции 			= ФР.ККТ_СоответствиеПредметаРасчета( VAL(ПРПозиции), МОДЕЛЬОБОРУДОВАНИЯ );
	СпособРасчетаПозиции 			= ФР.ККТ_СоответствиеСпособаРасчета( VAL(СРПозиции), МОДЕЛЬОБОРУДОВАНИЯ );
	
	// Разбор списка марок позиции
	КоличествоМарок 		= 0;
	IF ( !ПУСТО( ШтрихКодМаркировки ) AND МаркированныйТовар )
	{
		IF ( ATC( ШтрихКодМаркировки, "|" ) > 0 )
		{	
			РазделительМарок 	= "|";
			НомерСлова			= 1;
			ШтрихКодМаркировки	= РазделительМарок + ШтрихКодМаркировки;
			Марка				= ПОЛУЧИТЬСЛОВО( ШтрихКодМаркировки, РазделительМарок, НомерСлова );
			
			//подсчет количества разделителей в строке для определения количества слов
			WHILE ( !ПУСТО( Марка ) )
			{
				//обычные штрикоды пропускаем
				IF ( LEN( ALLTRIM( Марка ) ) > 13 )
				{
					КоличествоМарок++;
					Марки[ КоличествоМарок ] = Марка;					
				}			
				НомерСлова++;
				Марка			= ПОЛУЧИТЬСЛОВО( ШтрихКодМаркировки, РазделительМарок, НомерСлова );
			}		
		}
	}
	//\\конец разбора списка марок
	
	//если есть более одной марки табачной продукции, то разделим строки с марками на отдельные строки чека
	IF ( КоличествоМарок >= 1 )
	{
		НомерМарки		= 1;
		Цена			= СуммаТовара / ЕСЛИ( КоличествоТовара == 0, 1, КоличествоТовара ); //цена за единицу позиции
		WHILE ( НомерМарки <= КоличествоМарок )
		{
			ШКМарки 		= Марки[ НомерМарки ];
			НомерМарки++;
			Количество		= 1; 
			Сумма			= Цена;
			СуммаСкидкиПозиции = 0; //скидки в случае разделения позиции не выводим
		
			ЗАПРОС( "INSERT INTO " + ИмяТаблицыСтрокЧека + " ( operation, password, mode, checktype, 
													name, quantity, price, _price_u, summa, destination, department, discounttype, discountvalue, kodn, rsubject, rvariant, marktype, markbc )
			VALUES ( 'Регистрация', '" + FROperatorProfile + "', 1, 0, '" + STDF( Наименование ) + "', " + STR( Количество, 16, 3 ) + ", " + 
			STR( Цена, 16, 2 ) + ", " + STR( Цена, 16, 2 ) + ", " + STR( Сумма, 16, 2 ) + ", 0, " + ЕСЛИ( ПУСТО( СекцияККМ ), 1, СекцияККМ ) + ", 0, " + 
			STR( СуммаСкидкиПозиции, 16, 3 ) + ", '" + КодНалога + "', '" + ПредметРасчетаПозиции + "', '" + СпособРасчетаПозиции + "', '" + ТипМаркировки + "', '" + STDF(ШКМарки) + "' )" );
		
			//уменьшим общее количество товара и сумму для случая когда в одной строке будет объединено несколько позиций с марками и без них
			//количество единиц без марок будут пробиты отдельной строкой
			КоличествоТовара = КоличествоТовара - Количество;
			СуммаТовара = СуммаТовара - Сумма;		
		}
		//если осталось что добавить в чек после разделения, то добавляем
		IF ( КоличествоТовара > 0 )
		{
			ЗАПРОС( "INSERT INTO " + ИмяТаблицыСтрокЧека + " ( operation, password, mode, checktype, 
														name, quantity, price, _price_u, summa, destination, department, discounttype, discountvalue, kodn, rsubject, rvariant)
			VALUES ( 'Регистрация', '" + FROperatorProfile + "', 1, 0, '" + STDF( Наименование ) + "', " + STR( КоличествоТовара, 16, 3 ) + ", " + 
			STR( ЦенаТоварнойПозиции, 16, 2 ) + ", " + STR( ЦенаТоварнойПозиции, 16, 2 ) + ", " + STR( СуммаТовара, 16, 2 ) + ", 0, " + ЕСЛИ( ПУСТО( СекцияККМ ), 1, СекцияККМ ) + ", 0, " + 
			STR( СуммаСкидкиПозиции, 16, 3 ) + ", '" + КодНалога + "', '" + ПредметРасчетаПозиции + "', '" + СпособРасчетаПозиции + "' )" );
		
		}
	}
	ELSE
	{
		ЗАПРОС( "INSERT INTO " + ИмяТаблицыСтрокЧека + " ( operation, password, mode, checktype, 
														name, quantity, price, _price_u, summa, destination, department, discounttype, discountvalue, kodn, rsubject, rvariant, marktype, markbc )
			VALUES ( 'Регистрация', '" + FROperatorProfile + "', 1, 0, '" + STDF( Наименование ) + "', " + STR( КоличествоТовара, 16, 3 ) + ", " + 
			STR( ЦенаТоварнойПозиции, 16, 2 ) + ", " + STR( ЦенаТоварнойПозиции, 16, 2 ) + ", " + STR( СуммаТовара, 16, 2 ) + ", 0, " + ЕСЛИ( ПУСТО( СекцияККМ ), 1, СекцияККМ ) + ", 0, " + 
			STR( СуммаСкидкиПозиции, 16, 3 ) + ", '" + КодНалога + "', '" + ПредметРасчетаПозиции + "', '" + СпособРасчетаПозиции + "', '" + ТипМаркировки + "', '" + STDF(ШтрихКодМаркировки) + "' )" );
	}
	
	ПРОПУСТИТЬ( 1, "СписокТоваров");
} //WHILE ( !КОНЕЦКОНТЕКСТА( "СписокТоваров" ) )
//удалим таблицу товаров
ЗАПРОС("DROP TABLE " + ИмяТаблицыТоваров);

СуммаДокумента = ЗАПРОС("SELECT summa FROM spr000 WHERE code ='" + КодДокумента + "' AND ic = '" + ИДДокумента + "'");
//фиксируем оплаты чека
//если полный расчет, то оплата может состоять из оплаты наличными равной сумме из РКО и оплаты по предоплате
IF ( СпособРасчета == 4 )
{
	IF ( ROUND( СуммаДокумента, 2) != 0 )
	ЗАПРОС( "INSERT INTO " + ИмяТаблицыСтрокЧека + " ( operation, closetype, price )
			VALUES ( 'Оплата', '" + ФР.ККТ_ПолучитьКодОплатыПоТипуОплаты( 0, МОДЕЛЬОБОРУДОВАНИЯ ) + "', " + STR( СуммаДокумента, 16, 2 ) + " )" );

}
//закрываем чек в ККМ
ЗАПРОС( "INSERT INTO " + ИмяТаблицыСтрокЧека + " ( operation, price )
		VALUES ( 'Закрытие чека', 0 )" );

//ФЛК
РезультатФЛК = ФР.ПроизвестиФорматноЛогическийКонтроль();

//печатаем чек на ФР
ЧекНапечатан = false;
IF ( МОДЕЛЬОБОРУДОВАНИЯ == "АТОЛДТО10" )
	ЧекНапечатан = ФР.АТОЛДТО10_ПечатьЧекаНаФР( );
ELSE IF ( МОДЕЛЬОБОРУДОВАНИЯ == "МЕРКУРИЙ" )
	ЧекНапечатан = ФР.МЕРКУРИЙФР_ПечатьЧекаНаФР( );	
ELSE IF ( МОДЕЛЬОБОРУДОВАНИЯ == "ШТРИХ" )
	ЧекНапечатан = ФР.ШТРИХ_ПечатьЧекаНаФР( );	
	
IF ( ЧекНапечатан )
{
	ЗАПРОС( "UPDATE spr000 SET f_kkm = 1 WHERE code= '006' AND ic = " + ИДДокумента );
	СООБЩЕНИЕ("Чек успешно пробит на ККМ");
	RETURN true;
}
