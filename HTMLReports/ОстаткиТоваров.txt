// Создаем временную таблицу для сбора списка товаров
ТаблицаТоваров	= "##" + УникальноеИмя( );
Учет			= "001";
_ТОЧКАЗРЕНИЯ	= "0000000001";
Склад			= ЕСЛИ( VAL( Склад ) == 0, "", Склад );
ЗАПРОС( "CREATE TABLE " + ТаблицаТоваров + "( code char(10), maincode char( 10 ), name varchar( 250 ), ic int, parent int, 
											  parentname varchar(250), folder bit, f_subres bit, identity_column int IDENTITY( 1 , 1 ) ) " );

// Если выбраны папки товаров, то формируем список товаров, попавших в эти папки
// Определяем код структуры, из которой необходимо брать папки
КодСтруктуры	= ЗАПРОС( "SELECT dbo.fn_getsuitabletree( '" + _ТОЧКАЗРЕНИЯ + "', 'RPT', 'SPR', 'S02' )" );
	
// Добавляем в таблицу товаров содержимое всех папок
ЗАПРОС( "EXECUTE sp_gettree 'S02', 0, '" + КодСтруктуры + "', 0, '" + ТаблицаТоваров + "', 1" );
ЗАПРОС( "UPDATE temp
		 SET maincode = sprnn.maincode, f_subres= sprnn.f_subres
		 FROM " + ТаблицаТоваров + " temp
		 INNER JOIN sprnn sprnn ON sprnn.nn = temp.code" );
		 
// Удаляем характеристики, которые могли оказаться в папках и попасть в список
ЗАПРОС( "DELETE FROM temp
		 FROM " + ТаблицаТоваров + " temp
		 WHERE f_subres= 1" );
		 
// Добавляем все характеристики без указания папки
ЗАПРОС( "INSERT INTO " + ТаблицаТоваров + " ( code, maincode, name, ic, parent, parentname, folder, f_subres ) 
		 SELECT sprnn.nn, sprnn.maincode, sprnn.name, sprnn.identity_column, 0, '', 0, sprnn.f_subres
		 FROM sprnn sprnn
		 INNER JOIN " + ТаблицаТоваров + " temp ON sprnn.subcode = temp.code
		 WHERE sprnn.f_subres= 1 " );

// Создаем временную таблицу для сбора остатков по филиалам
ТаблицаОстатков	= "##" + УникальноеИмя( );
ЗАПРОС( "CREATE TABLE " + ТаблицаОстатков + "( sklad char( 3 ), nn char( 10 ), maincode char( 10 ), incena float, cena float, kolp float )" );

ДобавитьКонтекст( "SELECT skl.code AS sklad, skl.name, branch.dbase 
				   FROM sprbranch branch
				   INNER JOIN sprskl skl ON skl.branch = branch.code " +
				   ЕСЛИ( !ПУСТО( Склад ), "WHERE skl.code = '" + Склад + "'", "" ), "СписокСкладов" );
WHILE ( !КонецКонтекста( "СписокСкладов" ) )
{
	БазаДанных		= СписокСкладов.dbase;
	ЗАПРОС( "INSERT INTO " + ТаблицаОстатков + "( sklad, nn, incena, cena, kolp )
			 SELECT '" + СписокСкладов.sklad + "', temp.code, 
					" + БазаДанных + ".dbo.fn_calcsklad_incena( sprnn.nn, '" + TTOC( Дата ) + "', '" + СписокСкладов.sklad + "', '" + Учет + "' ),
					" + БазаДанных + ".dbo.fn_calcsklad_cena( sprnn.nn, '" + TTOC( Дата ) + "', '" + СписокСкладов.sklad + "', '" + Учет + "' ),	
					" + БазаДанных + ".dbo.fn_calcsklad( sprnn.nn, '" + TTOC( Дата ) + "', '" + СписокСкладов.sklad + "', '" + Учет + "', '' )
			 FROM " + БазаДанных + "..sprnn sprnn
			 INNER JOIN " + ТаблицаТоваров + " temp ON sprnn.maincode = temp.maincode");
	Пропустить( 1, "СписокСкладов" );
}
УдалитьКонтекст( "СписокСкладов" );

// Создаем временные индексы для ускорения формирования отчета
ЗАПРОС( "CREATE NONCLUSTERED INDEX " + ТаблицаТоваров + "_code ON " + ТаблицаТоваров + "( code )" );
ЗАПРОС( "CREATE NONCLUSTERED INDEX " + ТаблицаОстатков + "_nn ON " + ТаблицаОстатков + " ( nn ) INCLUDE ( incena, cena, kolp )" );

// Формируем список товаров для отображения
// Поставщика можем проверить только по карточке товара, т.к. в филиалах не известно по какому полю синхронизировать
ДобавитьКонтекст(
			"SELECT 
					temp.code AS Товар, temp.parent,
					sprmainnn.name AS ТоварНаименование, sprmainnn.maincode AS ТоварКод, 
					sprmainnn.code AS ТоварАртикул, sprmainnn.ed AS ТоварЕдиница, sprmainnn.min_ AS ТоварМинимальныйОстаток, 
					sprmainnn.max_ AS ТоварМаксимальныйОстаток, temp.parentname AS ИмяПапки, sprmainnn.weight, sprmainnn.ed_weight, 
					sprmainnn.d_litr, sprmainnn.edd_litr, sprmainnn.f_hchild,
					SUM( saldo.kolp ) AS ОстатокКоличество, 
					CASE WHEN SUM( saldo.kolp ) <> 0 THEN SUM( saldo.kolp * saldo.cena ) / SUM( saldo.kolp ) ELSE 0 END AS УчетнаяЦена, 
					CASE WHEN SUM( saldo.kolp ) <> 0 THEN SUM( saldo.kolp * saldo.incena ) / SUM( saldo.kolp ) ELSE 0 END AS СебестоимостьЦена, 
					SUM( saldo.kolp * saldo.cena ) AS УчетнаяСумма, 
					SUM( saldo.kolp * saldo.incena ) AS СебестоимостьСумма, temp.identity_column
			FROM " + ТаблицаТоваров + " temp 
			INNER JOIN sprnn sprmainnn ON sprmainnn.nn = temp.code
			INNER JOIN sprnn sprnn ON sprmainnn.nn = CASE WHEN sprnn.subcode = '' THEN sprnn.nn ELSE sprnn.subcode END
			INNER JOIN " + ТаблицаОстатков + " saldo ON saldo.nn = sprnn.nn 
			GROUP BY temp.code, sprmainnn.name, sprmainnn.maincode, sprmainnn.code, sprmainnn.ed, sprmainnn.min_, sprmainnn.max_, temp.identity_column,
					 temp.parentname, sprmainnn.weight, sprmainnn.ed_weight, sprmainnn.d_litr, sprmainnn.edd_litr, sprmainnn.f_hchild, temp.parent,
					 CONVERT( int, sprmainnn.notavail )
			HAVING ROUND( SUM( saldo.kolp ), 3 ) <> 0  
			ORDER BY temp.identity_column, sprmainnn.name ", "СписокТоваров", 1 );

СИСТЕМНОЕСООБЩЕНИЕ( );
ВыбратьКонтекст( "СписокТоваров" );

Номер_по_порядку			= 1;
ПодИтогКоличество			= 0.00;
ПодИтогУчетнаяСумма			= 0.00;
ПодИтогСебестоимостьСумма	= 0.00;

ИтогКоличество				= 0.00;
ИтогУчетнаяСумма			= 0.00;
ИтогСебестоимостьСумма		= 0.00;
ИтогНаценкаПроцент			= 0.00;
ИтогНаценкаСумма			= 0.00;
СуммаУчета					= 0.00;
СуммаСебестоимости			= 0.00;

Заголовок					= "<table class=""table""><thead>
								   <tr>
									   <th rowspan= ""2"" class=""first"" style=""width: 250px"">Наименование товара</th>
									   <th rowspan= ""2"" class=""first"" style=""width: 100px"">Код</th>
									   <th rowspan= ""2"" class=""first"" style=""width: 100px"">Количество</th>
									   <th colspan= ""2"" class=""first"" style=""width: 200px"">Учетные цены</th>
									   <th colspan= ""2"" class=""first"" style=""width: 200px"">Себестоимость</th>
								   </tr>
								   <tr>
									   <td class=""first"">Цена</th>
									   <td class=""first"">Сумма</th>
									   <td class=""first"">Цена</th>
									   <td class=""first"">Сумма</th>
								   </tr>
								</thead>
								<tbody> ";

ИДПапки						= 0;
СтрокиОтчета				= "";
WHILE ( !КОНЕЦКОНТЕКСТА( "СписокТоваров" ) )
{
	ВыбратьКонтекст( "СписокТоваров" );
	Номер_по_порядку++;

	IF ( ИДПапки != СписокТоваров.parent )
	{
		ДобавитьКонтекст("SELECT 					
								SUM( saldo.kolp ) AS Количество, 
								SUM( saldo.kolp * saldo.cena ) AS УчетнаяСумма, 
								SUM( saldo.kolp * saldo.incena ) AS СебестоимостьСумма
						  FROM " + ТаблицаТоваров + " temp 
						  INNER JOIN sprnn sprmainnn ON sprmainnn.nn = temp.code
						  INNER JOIN sprnn sprnn ON sprmainnn.nn = CASE WHEN sprnn.subcode = '' THEN sprnn.nn ELSE sprnn.subcode END
						  INNER JOIN " + ТаблицаОстатков + " saldo ON saldo.nn = sprnn.nn
						  WHERE temp.parent = " + СписокТоваров.parent, "СписокИтогов", 1 );
		ИДПапки						= СписокТоваров.parent;
		ИмяПапки					= ЗАПРОС( "SELECT dbo.fn_getpath( 'S02', '" + КодСтруктуры + "', " + СписокТоваров.parent + ", '\', 0) " );

    	СтрокиОтчета				+= "<tr><td colspan = ""2"" class= ""warefolder"">" + ЕГАИС.ЗаменитьСимволы( ИмяПапки ) + "</td>
										<td class= ""folderfloat"">" + STR( СписокИтогов.Количество, 16, 3 ) + "</td>
										<td colspan = ""2"" class= ""folderfloat"">" + STR( СписокИтогов.УчетнаяСумма, 16, 2 ) + "</td>
										<td colspan = ""2"" class= ""folderfloat"">" + STR( СписокИтогов.СебестоимостьСумма, 16, 2 ) + "</td>
									</tr>";
		УдалитьКонтекст( "СписокИтогов" );
	}
	ВыбратьКонтекст( "СписокТоваров" );
	
	Вес				= ЕСЛИ( !ПУСТО( weight ), ALLTRIM( STR( weight ) ) + " " + ALLTRIM( ed_weight ), "" );
	Объем			= ЕСЛИ( !ПУСТО( d_litr ), ALLTRIM( STR( d_litr ) ) + " " + ALLTRIM( edd_litr ), "" );

	ТоварОбъемВес	= ЕСЛИ( !ПУСТО( Вес ), Вес, Объем );
	ИмяПапки		= СписокТоваров.ИмяПапки;	
	
	СтрокиОтчета				+= "<tr><td class= ""warename"">" + ЕГАИС.ЗаменитьСимволы( ALLTRIM( STR( Номер_по_Порядку ) ) + "   " + ТоварНаименование + "   " + ТоварОбъемВес ) + "</td>
								    <td class= ""warecode"">" + ТоварКод + "</td>
									<td class= ""warefloat"">" + STR( ОстатокКоличество, 16, 3 ) + "</td>
									<td class= ""warefloat"">" + STR( УчетнаяЦена, 16, 2 ) + "</td>
									<td class= ""warefloat"">" + STR( УчетнаяСумма, 16, 2 ) + "</td>
									<td class= ""warefloat"">" + STR( СебестоимостьЦена, 16, 2 ) + "</td>
									<td class= ""warefloat"">" + STR( СебестоимостьСумма, 16, 2 ) + "</td>
									</tr>";

	ПодИтогКоличество			+= ОстатокКоличество;
	ПодИтогУчетнаяСумма			+= УчетнаяСумма;
	ПодИтогСебестоимостьСумма	+= СебестоимостьСумма;
	ИтогКоличество				+= ОстатокКоличество;
	ИтогУчетнаяСумма			+= УчетнаяСумма;
	ИтогСебестоимостьСумма		+= СебестоимостьСумма;
	ПРОПУСТИТЬ( 1, "СписокТоваров" );
}
СтрокиОтчета				+= "<tr><td colspan = ""2"" class= ""warefolder"">Итого</td>
								<td class= ""folderfloat"">" + STR( ИтогКоличество, 16, 3 ) + "</td>
								<td colspan = ""2"" class= ""folderfloat"">" + STR( ИтогУчетнаяСумма, 16, 2 ) + "</td>
								<td colspan = ""2"" class= ""folderfloat"">" + STR( ИтогСебестоимостьСумма, 16, 2 ) + "</td>
							</tr>";
УДАЛИТЬКОНТЕКСТ( "СписокТоваров" );
ЗАПРОС( "DROP TABLE " + ТаблицаТоваров );

RETURN Заголовок + СтрокиОтчета + "</tbody></table>";
