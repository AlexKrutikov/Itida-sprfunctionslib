IF ( КомандыЧека.checktype == "ПРЕЧЕК" )
{
	driverKKM.StringForPrinting	= ALLTRIM(КомандыЧека.name);
	driverKKM.PrintString( );
	
	СтрокаКоличествоСумма = ФР.ФормированиеСтрокиДляНефискальнойПечати("" + ALLTRIM( STR( КомандыЧека.price, 16, 2 ) + " * " + КомандыЧека.quantity + " = " + STR( КомандыЧека.summa, 16, 2 ) ) + "", "R", "", "", "" );
	driverKKM.StringForPrinting	= СтрокаКоличествоСумма;
	driverKKM.PrintString( );
}
ELSE
{
	СуммаПозиции 		= КомандыЧека.summa;
	ЦенаПродажиПозиции 	= КомандыЧека.price;
	КоличествоТовара	= КомандыЧека.quantity;
	ВерсияФФД			= КомандыЧека.ffd_version;
	СуммаСкидкиПозиции	= КомандыЧека.discountvalue;
	ТипОперацииВпозиции = ФР.ШТРИХ_ПолучитьВидОперациивЧеке( ТипЧека ); //Тип операции (1 - Приход, 2 - Возврат прихода, 3 - расход, 4 - возврат расхода)
	
	//09.03.2021 - изменение алгоритма пробития скидок на единый для всех моделей ККТ.
	ЦенаПродажиПозиции = ROUND(СуммаПозиции/ЕСЛИ(КоличествоТовара==0,1,КоличествоТовара), 2);
	
	// Разбор списка марок позиции
	КоличествоМарок = 0;
	КМПозиции = КомандыЧека.markbc;
	IF ( !ПУСТО( КМПозиции ) )
	{
		IF ( VAL( КомандыЧека.marktype ) <> 0 )
		{	
			
			РазделительМарок 	= "|";
			НомерСлова			= 1;
			КМПозиции			= РазделительМарок + КМПозиции;
			Марка				= ПОЛУЧИТЬСЛОВО( КМПозиции, РазделительМарок, НомерСлова );
				
			//подсчет количества разделителей в строке для определения количества слов
			WHILE ( !ПУСТО( Марка ) )
			{
				//обычные штрикоды пропускаем
				IF ( LEN( ALLTRIM( Марка ) ) > 13 )
				{
					КоличествоМарок++;
					Марки[ КоличествоМарок ] = Марка;					
				}			
				НомерСлова++;
				Марка			= ПОЛУЧИТЬСЛОВО( КМПозиции, РазделительМарок, НомерСлова );
			}		
		}
	}
	//\\конец разбора списка марок
	
	//если есть более одной марки табачной продукции, то разделим строки с марками на отдельные строки чека
	IF ( КоличествоМарок >= 1 )
	{
		НомерМарки	= 1;
		WHILE ( НомерМарки <= КоличествоМарок )
		{
			ШКМарки 		= Марки[ НомерМарки ];
			НомерМарки++;
			
			
			Количество		= 1; 
			Сумма			= ЦенаПродажиПозиции;
			СуммаСкидкиПозиции = 0; //скидки в случае разделения позиции не выводим
			
			//driverKKM.TEXTWRAP			= 1;
			driverKKM.Summ1Enabled = 1;
			driverKKM.TaxValueEnabled = 0;
			driverKKM.CheckType	= ТипОперацииВпозиции;
			
			driverKKM.Summ1 = Сумма;
			
			IF (TYPE ("_ВЫВОДИТЬПРИЗНАКМАРКИРОВКИВБУМАЖНОМЧЕКЕ") == "U")
				_ВЫВОДИТЬПРИЗНАКМАРКИРОВКИВБУМАЖНОМЧЕКЕ = false;  //признак необходимости выводить букву [М] для товарной позиции в чеке средствами профиля. По умолчанию отключено (значение false),
																//т.к. ожидается что буква [М] будет выводиться средствами прошивки
			
			НаименованиеТовараВЧеке = ЕСЛИ(_ВЫВОДИТЬПРИЗНАКМАРКИРОВКИВБУМАЖНОМЧЕКЕ == true AND !ПУСТО( ШКМарки ), "[М] ","") + ALLTRIM(КомандыЧека.name);
										
			driverKKM.StringForPrinting	= НаименованиеТовараВЧеке;
			driverKKM.Price				= ЦенаПродажиПозиции;
			driverKKM.Quantity			= Количество;
			driverKKM.Department		= КомандыЧека.department;
			
			IF ( _ПЕЧАТАТЬНАЛОГИ )
				driverKKM.Tax1			= КомандыЧека.kodn;		
			IF ( СуммаСкидкиПозиции <> 0 )
			{
				IF ( СуммаСкидкиПозиции > 0 )
				{
					driverKKM.DiscountValue = СуммаСкидкиПозиции;
					driverKKM.ChargeValue = 0;
				}
				ELSE IF ( СуммаСкидкиПозиции < 0 )
				{
					driverKKM.DiscountValue = 0;
					driverKKM.ChargeValue = -СуммаСкидкиПозиции;
				}
			}
			
			driverKKM.PaymentTypeSign	= КомандыЧека.rvariant;		
			driverKKM.PaymentItemSign 	= КомандыЧека.rsubject;	

			IF ( ВерсияФФД == "1.2" )
			{
				driverKKM.MeasureUnit = 0; // мера количества
				driverKKM.DivisionalQuantity = false; // без дробного количества
			}			
			
			driverKKM.FNOperation();
			
			//Маркировка
			IF (TYPE ("_ИСПОЛЬЗОВАТЬСТАРЫЙФОРМАТТЭГА1162") == "U")
				_ИСПОЛЬЗОВАТЬСТАРЫЙФОРМАТТЭГА1162 = false; //признак необходимости использовать старый формат тэга 1162 для чеков. По умолчанию равен false, т.е. используется новый формат
				
			IF ( !ПУСТО( ШКМарки ) )
			{
				ДлинаКодаМаркировки = 0;
				gtin = "";
				serial = "";
				new_marktype = 17485; //для табака, обуви и прочих, кроме шуб
				marktype = КомандыЧека.marktype;				
				ДлинаКодаМаркировки = ФР.ПолучитьДлиннуШтрихкодаМаркировки(ШКМарки, marktype, gtin, serial);
				
				IF ( VAL( marktype ) == 2 AND _ИСПОЛЬЗОВАТЬСТАРЫЙФОРМАТТЭГА1162 == true ) //меховые изделия
					new_marktype = 21062;
				
				IF (TYPE ("_ККТПЕРЕДАВАТЬПОЛНЫЙКОДМАРКИРОВКИ") == "U")
					_ККТПЕРЕДАВАТЬПОЛНЫЙКОДМАРКИРОВКИ = true; //признак необходимости передавать весь код маркировки в составе реквизитов чека
				
				IF ( _ККТПЕРЕДАВАТЬПОЛНЫЙКОДМАРКИРОВКИ == false AND ДлинаКодаМаркировки > 0 AND ВерсияФФД <> "1.2" )
					ШКМарки = LEFT( ШКМарки, ДлинаКодаМаркировки );
								
				IF (_СПОСОБФОРМИРОВАНИЯТЭГА1162 == 2 OR ВерсияФФД == "1.2" )
				{
					driverKKM.BarCode = ALLTRIM( ШКМарки );
					driverKKM.FNSendItemBarcode();
				}
				ELSE
				{
					IF (!ПУСТО(gtin) AND !ПУСТО(serial))
					{
						driverKKM.MarkingType = ЕСЛИ(_ИСПОЛЬЗОВАТЬСТАРЫЙФОРМАТТЭГА1162 == true, VAL(marktype), new_marktype);
						driverKKM.SerialNumber = serial;
						driverKKM.GTIN = gtin;
						driverKKM.FNSendItemCodeData();
					}
				}
			}
			
			//уменьшим общее количество товара и сумму для случая когда в одной строке будет объединено несколько позиций с марками и без них
			//количество единиц без марок будут пробиты отдельной строкой
			КоличествоТовара -= Количество;
			СуммаПозиции -= Сумма;
		}
	
	}
	IF ( КоличествоТовара > 0 )				
	{
	
		//driverKKM.TEXTWRAP			= 1;
		driverKKM.Summ1Enabled = 1;
		driverKKM.TaxValueEnabled = 0;
		driverKKM.CheckType	= ТипОперацииВпозиции;
		
		driverKKM.Summ1 = СуммаПозиции;		
		
		НаименованиеТовараВЧеке 	= ALLTRIM(КомандыЧека.name);
									
		driverKKM.StringForPrinting	= НаименованиеТовараВЧеке;
		driverKKM.Price				= ЦенаПродажиПозиции;
		driverKKM.Quantity			= КоличествоТовара;
		driverKKM.Department		= КомандыЧека.department;
		
		IF ( _ПЕЧАТАТЬНАЛОГИ )
			driverKKM.Tax1			= КомандыЧека.kodn;		
		IF ( СуммаСкидкиПозиции <> 0 )
		{
			IF ( СуммаСкидкиПозиции > 0 )
			{
				driverKKM.DiscountValue = СуммаСкидкиПозиции;
				driverKKM.ChargeValue = 0;
			}
			ELSE IF ( СуммаСкидкиПозиции < 0 )
			{
				driverKKM.DiscountValue = 0;
				driverKKM.ChargeValue = -СуммаСкидкиПозиции;
			}
		}
		
		driverKKM.PaymentTypeSign	= КомандыЧека.rvariant;		
		driverKKM.PaymentItemSign 	= КомандыЧека.rsubject;				
		
		driverKKM.FNOperation();
	}
}
