СписокШаблоновJSON = RESTAPI.Locards_ПолучениеСпискаАктивныхШаблонов( );
IF ( ПУСТО(СписокШаблоновJSON) )
{
	СООБЩЕНИЕ("Не определены шаблоны в личном кабинете LoCards. " + CHR(13) + CHR(10) + "Выгрузка карт в Locards проведена не будет.", "Locards - выгрузка карт");
	RETURN false;
}

IF ( !ДОБАВИТЬКОНТЕКСТ( "LOCAL: id int, name char, templateName char", "ШаблоныЛокардс" ) ) RETURN false;

ЗАГРУЗИТЬJSON( "СписокШаблонов", СписокШаблоновJSON, "Шаблон");
ВЫБРАТЬКОНТЕКСТ("СписокШаблонов");
WHILE ( !КОНЕЦКОНТЕКСТА( "СписокШаблонов" ) )
{
	ЗАГРУЗИТЬ( "ШаблоныЛокардс", "JSON", ЗНАЧЕНИЕПОЛЯ( "СписокШаблонов", "Шаблон" ) );
	ПРОПУСТИТЬ( 1, "СписокШаблонов");
}
УДАЛИТЬКОНТЕКСТ("СписокШаблонов");

Локардс_Токен = RESTAPI.LOCARDS_TOKEN( "" );
IF ( ПУСТО(Локардс_Токен) )
{
	СООБЩЕНИЕ("Не определен токен LOCARDS. " + CHR(13) + CHR(10) + "Выгрузка карт в Locards проведена не будет.", "Locards - выгрузка карт");
	RETURN false;
}

//создадим временную таблицу для карт из Локардс
ИмяТаблицы			= "##" + УНИКАЛЬНОЕИМЯ( );
ЗАПРОС( "CREATE TABLE " + ИмяТаблицы + "( cardNumber char(30), phone char(11) ) " );

УСЛОВИЕПОКАРТАМ = "";
IF ( !ПУСТО( СПИСОККАРТ ) )
{										
	ЗАГРУЗИТЬJSON("КартыЛокардс", СПИСОККАРТ, "Данные");
	ПОКА ( !КОНЕЦКОНТЕКСТА("КартыЛокардс") )
	{
		ЗАПРОС("INSERT INTO " + ИмяТаблицы + " (cardNumber, phone)
				VALUES ('" + ПОЛЕ_JSON( КартыЛокардс.Данные, "cardNumber") + "','" +  ПОЛЕ_JSON( КартыЛокардс.Данные, "phone") + "') ");
				
		ПРОПУСТИТЬ(1, "КартыЛокардс");
	}	
	
	УСЛОВИЕПОКАРТАМ = " AND client.cardn not in ( SELECT cardNumber FROM " + ИмяТаблицы + ") AND REPLACE( REPLACE( REPLACE( client.telefon, '+', ''), '-', ''), ' ', '') not in ( SELECT phone FROM " + ИмяТаблицы + ")";
	
	УДАЛИТЬКОНТЕКСТ("КартыЛокардс");
}

//сформируем массив карт для выгрузки
ДОБАВИТЬКОНТЕКСТ("SELECT
					client.name, 
					REPLACE( REPLACE( REPLACE( client.telefon, '+', ''), '-', ''), ' ', '') AS Телефон, 
					card.cardn AS НомерКарты, 
					client.birthdate AS ДеньРождения,
					CASE WHEN client.sex = 0 THEN 1 ELSE client.sex END AS Пол,
					0 AS Накопления,
					dbo.fn_calccard_bonus( card.cardn, 'БОНУС', GETDATE() ) AS Баланс,
					dbo.fn_calccard_turnover( card.code, '', 0 ) AS ВсегоПотречено,
					card.discount, card.bonus,
					(SELECT ctext FROM sprbonus WHERE code = card.bonus) AS ШаблонБонус,
					(SELECT ctext FROM specmdiscount WHERE code = card.discount) AS ШаблонСкидка
				FROM sprmclient client
				INNER JOIN sprmcard card ON client.card = card.code OR card.client = client.code
				WHERE client.notavail = 0 AND client.cardn <> '' AND client.name <> '' AND client.telefon <> '' AND LEN(client.telefon) >= 11 AND LEN(client.telefon) <= 12
				AND datalength(RTRIM(client.name)) - datalength(replace(RTRIM(client.name), ' ', '')) > 0  " + УСЛОВИЕПОКАРТАМ + 
				"ORDER BY card.bonus, card.discount ", "СписокКартКлиентов");

ВсегоКартКлиентов = КОЛИЧЕСТВОСТРОК("СписокКартКлиентов");
ИНДИКАТОР("Выгрузка карт клиентов", ВсегоКартКлиентов);
ВЫБРАТЬКОНТЕКСТ("СписокКартКлиентов");
СписокКарт = "";
Разделитель = ",";
СимволПереноса = CHR(13) + CHR(10);
ИДШаблонаНачальный = "";
ПОКА ( !КОНЕЦКОНТЕКСТА( "СписокКартКлиентов" ) )
{
	IF ( НОМЕРСТРОКИ("СписокКартКлиентов") % 100 == 0 ) ИНДИКАТОР( НОМЕРСТРОКИ( "СписокКартКлиентов" ), "Выгрузка карты " + НомерСтроки("СписокКартКлиентов") + " из " + ВсегоКартКлиентов);
	
	ИДШаблона = "";
	НазваниеШаблона = "";
	ЗначениеДляПоиска = "";
	IF ( !ПУСТО(СписокКартКлиентов.discount) )
		ЗначениеДляПоиска = СписокКартКлиентов.ШаблонСкидка;
	ELSE
		ЗначениеДляПоиска = СписокКартКлиентов.ШаблонБонус;
		
	IF ( НАЙТИ( "ШаблоныЛокардс", "templateName", ЗначениеДляПоиска ) )
	{
		ИДШаблона = ЗНАЧЕНИЕПОЛЯ( "ШаблоныЛокардс", "id" );
		НазваниеШаблона = ЗНАЧЕНИЕПОЛЯ( "ШаблоныЛокардс", "name" );
		IF ( ПУСТО( ИДШаблонаНачальный ) ) ИДШаблонаНачальный = ИДШаблона;
	}
	//если сменился номер шаблона, то значит далее будут другие карты. Выгрузим отдельно набор предыдущих карт с привязкой к шаблону
	IF ( ИДШаблонаНачальный <> ИДШаблона AND !ПУСТО( СписокКарт ) )
	{
		//выгрузка карт
		IF ( !RESTAPI.LOCARDS_ЗапросИмпортаКарт( СписокКарт, ИДШаблонаНачальный ) )
		{
			//СООБЩЕНИЕ("Выгрузка карт завершилась ошибкой. ", "LoCards - выгрузка карт");
			УДАЛИТЬКОНТЕКСТ("СписокКартКлиентов");
			ЗАПРОС("DROP TABLE " + ИмяТаблицы);
			RETURN false;
		}
		//обнуляем список карт
		СписокКарт = "";
		ИДШаблонаНачальный = ИДШаблона;
	}
	
	//определим данные для карты
	КлиентИмя = ПОЛУЧИТЬСЛОВО( " " + СписокКартКлиентов.name + " ", " ", " ", 2 );
	КлиентОтчество = ПОЛУЧИТЬСЛОВО( " " + СписокКартКлиентов.name + " ", " ", " ", 3 );
	КлиентФамилия = ПОЛУЧИТЬСЛОВО( " " + СписокКартКлиентов.name + " ", " ", " ", 1 );
	КлиентТелефон = ЕСЛИ( ЛЕВСИМВ( СписокКартКлиентов.Телефон, 1 ) == "8", "7" + ПРАВСИМВ( СписокКартКлиентов.Телефон, ДЛИНА( СписокКартКлиентов.Телефон ) - 1 ), СписокКартКлиентов.Телефон );
	КартаНомер = СписокКартКлиентов.НомерКарты;	
	ДатаРождения = DTOC( СписокКартКлиентов.ДеньРождения, 7, "-" );
	КлиентПол = СписокКартКлиентов.Пол;
	КоличествоБаллов = ЕСЛИ( СписокКартКлиентов.Баланс < 0, 0, СписокКартКлиентов.Баланс );
	СуммаНакоплений = СписокКартКлиентов.Накопления;
	СуммаПокупок = ЕСЛИ( СписокКартКлиентов.ВсегоПотречено < 0, 0, СписокКартКлиентов.ВсегоПотречено );
	
	//добавляем строку в список карт
	СписокКарт += КлиентИмя + Разделитель + КлиентОтчество + Разделитель + КлиентФамилия + Разделитель + КлиентТелефон + Разделитель + КартаНомер + Разделитель + 
	ДатаРождения + Разделитель + КлиентПол + Разделитель + СуммаНакоплений + Разделитель + КоличествоБаллов + Разделитель + СуммаПокупок + СимволПереноса;
		
	ПРОПУСТИТЬ( 1, "СписокКартКлиентов" );
}
УДАЛИТЬКОНТЕКСТ("СписокКартКлиентов");

ЗАПРОС("DROP TABLE " + ИмяТаблицы);

IF ( !ПУСТО( СписокКарт ) )
{
	IF ( !RESTAPI.LOCARDS_ЗапросИмпортаКарт( СписокКарт, ИДШаблона ) )
	{
		//СООБЩЕНИЕ("Выгрузка карт завершилась ошибкой. ", "LoCards - выгрузка карт");
		ИНДИКАТОР();	
		СИСТЕМНОЕСООБЩЕНИЕ();
		RETURN false;
	}
	УспешноеВыполнение = true;
}
ELSE
{
	СООБЩЕНИЕ("Нет новых карт для выгрузки", "LoCards - выгрузка карт");
	УспешноеВыполнение = true;
}
	
ИНДИКАТОР();	
СИСТЕМНОЕСООБЩЕНИЕ();

RETURN УспешноеВыполнение == true OR УспешноеВыполнение == "true";
