PUBLIC ИмяФайлаЖурнала, _АДРЕССЕРВЕРАБИФИТ, _ЛОГИНБИФИТ, _ПАРОЛЬБИФИТ, КоличествоТоваровВОдномЗапросе, _ОБОРУДОВАНИЕНАИМЕНОВАНИЕ;

//адрес сервера Бифит
_АДРЕССЕРВЕРАБИФИТ = "https://kassa.bifit.com";
//переменная отвечает за количество товаров, отправляемых в облако за один запрос
КоличествоТоваровВОдномЗапросе = 500;
//получим необходимые для авторизации данные из карточки торгового оборудования и проверим их заполнение
ДОБАВИТЬКОНТЕКСТ("SELECT login, password, name, firm, sklad, serialnumber, regnumber, ex_code FROM sprequipment WHERE code = '" + ALLTRIM(КОДОБОРУДОВАНИЯ) + "'", "ДанныеОборудования", 1);

_ЛОГИНБИФИТ = ДанныеОборудования.login;
_ПАРОЛЬБИФИТ = ДанныеОборудования.password;
_ФИРМА = ДанныеОборудования.firm;
_ОБОРУДОВАНИЕНАИМЕНОВАНИЕ = ДанныеОборудования.name;

_ФИРМАИНН = "";
_ФИРМАКПП = "";
_ФИРМАНАИМЕНОВАНИЕ = "";
_ФИРМАКОД = "";

IF ( ПУСТО( _ЛОГИНБИФИТ ) OR ПУСТО( _ПАРОЛЬБИФИТ ) )
{
	_КОДОШИБКИ			= "001";
	_ТЕКСТОШИБКИ		= "Не указаны логин и/или пароль в карточке торгового оборудования """ + ALLTRIM(_ОБОРУДОВАНИЕНАИМЕНОВАНИЕ) + """ ";
	СООБЩЕНИЕ(_ТЕКСТОШИБКИ);
	RETURN false;
}

IF ( ПУСТО( _ФИРМА ) )
{
	_КОДОШИБКИ			= "002";
	_ТЕКСТОШИБКИ		= "Не указана организация в карточке торгового оборудования """ + ALLTRIM(_ОБОРУДОВАНИЕНАИМЕНОВАНИЕ) + """ ";
	СООБЩЕНИЕ(_ТЕКСТОШИБКИ);
	RETURN false;
}
ELSE
{
	ДОБАВИТЬКОНТЕКСТ("SELECT inn, kpp, code, name FROM sprfirm WHERE code = '" + ALLTRIM(ДанныеОборудования.firm) + "'", "ДанныеОрганизации", 1);
	_ФИРМАИНН = ALLTRIM(ДанныеОрганизации.inn);
	_ФИРМАКПП = ALLTRIM(ДанныеОрганизации.kpp);
	_ФИРМАНАИМЕНОВАНИЕ = ALLTRIM(ДанныеОрганизации.name);
	_ФИРМАКОД = ALLTRIM(ДанныеОрганизации.code);
	IF (ПУСТО( _ФИРМАИНН ))
	{
		_КОДОШИБКИ			= "002";
		_ТЕКСТОШИБКИ		= "Не указана ИНН в карточке организации """ + ALLTRIM(_ФИРМАНАИМЕНОВАНИЕ) + """ (" + ALLTRIM(_ФИРМАКОД) + ") ";
		СООБЩЕНИЕ(_ТЕКСТОШИБКИ);
		RETURN false;
	}
}
/*
IF ( ПУСТО( ДанныеОборудования.sklad ) )
{
	_КОДОШИБКИ			= "003";
	_ТЕКСТОШИБКИ		= "Не указан склад в карточке торгового оборудования """ + ALLTRIM(ДанныеОборудования.name) + """ ";
	СООБЩЕНИЕ(_ТЕКСТОШИБКИ);
	RETURN false;
}
*/


//Логирование
//определим расположение файла лога
ИмяФайлаЖурнала = RESTAPI.БИФИТ_ИМЯФАЙЛАЖУРНАЛА(path_out);
ИмяФайлаОбмена = RESTAPI.БИФИТ_ФАЙЛОБМЕНА(path_out, "ВЫГРУЗКАJSON");

//авторизация
БифитТокен = RESTAPI.БИФИТ_АВТОРИЗАЦИЯ(_ЛОГИНБИФИТ, _ПАРОЛЬБИФИТ);
//если не получили токен, то прерываем выгрузку
IF (ПУСТО(БифитТокен)) RETURN "";

ОрганизацияИД = "";
//получение списка организаций
СписокОрганизаций = RESTAPI.БИФИТ_POSTЗАПРОС(_АДРЕССЕРВЕРАБИФИТ, "/cashdesk-api/v1/protected/organizations/list/read", "", БифитТокен, "");
//если не получили список организаций, то прерываем выгрузку, т.к. товар будет не привязать к орагнизации
IF ( ПУСТО(СписокОрганизаций) ) RETURN false;

НАШЛИ			= false;
ЗАГРУЗИТЬJSON( "БифитОрганизации", СписокОрганизаций, "БифитОрганизация" );
ВЫБРАТЬКОНТЕКСТ("БифитОрганизации");
WHILE (!КОНЕЦКОНТЕКСТА("БифитОрганизации") && !НАШЛИ)
{
	ЗАГРУЗИТЬJSON("Организация", ЗНАЧЕНИЕПОЛЯ("БифитОрганизации","БифитОрганизация"));
	ОрганизацияИД = ЗНАЧЕНИЕПОЛЯ( "Организация", "id" );
	ОрганизацияИмя = ЗНАЧЕНИЕПОЛЯ( "Организация", "name" );
	ОрганизацияИНН = ЗНАЧЕНИЕПОЛЯ( "Организация", "inn" );
	ОрганизацияКПП = ЗНАЧЕНИЕПОЛЯ( "Организация", "kpp" );
	
	IF ( !ПУСТО( _ФИРМАКПП ) )
		НАШЛИ		= ( ALLTRIM( ОрганизацияИНН )  == _ФИРМАИНН ) && ( ALLTRIM( ОрганизацияКПП )  == _ФИРМАКПП );
	ELSE
		НАШЛИ		= ( ALLTRIM( ОрганизацияИНН )  == _ФИРМАИНН );
	
	IF ( !НАШЛИ ) ПРОПУСТИТЬ( 1, "БифитОрганизации" );
}
IF (!НАШЛИ)
{
	ТекстОшибки = "Организация, выбранная в карточке обоудования, не найдена в ЛК Бифит." + CHR(13) + "Проверьте правильность занесения ИНН организации в ЛК Бифит и в карточке фирмы в Айтиде." ;
	СООБЩЕНИЕ(ТекстОшибки);
	RETURN false;
}
ELSE СИСТЕМНОЕСООБЩЕНИЕ("Найдена организация: " + ALLTRIM(ОрганизацияИмя) + "(" + ALLTRIM(ОрганизацияИД) + ")" );

//ОЧИСТКА ПЕРЕД ЗАГРУЗКОЙ
IF (ПРИЗНАКОЧИСТКИККМ)
	ОТВЕТ = RESTAPI.БИФИТ_POSTЗАПРОС(_АДРЕССЕРВЕРАБИФИТ, "/cashdesk-api/v1/protected/nomenclatures/list/delete?organization_id=" + ОрганизацияИД + "", "", БифитТокен, "");

//начало формиррования файла и отправка
СтрокаТоваров = "";
СтрокаТоваров += "[";

КоличествоТоваровНовые = 0;

КоличествоЭлементов = ЗАПРОС("SELECT count(code) FROM " + ТОВАРЫ);
СООТВЕТСТВИЕНАЛОГОВ[0] = "1";	//Без НДС
СООТВЕТСТВИЕНАЛОГОВ[1] = "3";	//НДС 10%
СООТВЕТСТВИЕНАЛОГОВ[2] = "1";	//Без НДС
СООТВЕТСТВИЕНАЛОГОВ[3] = "1";	//Без НДС
СООТВЕТСТВИЕНАЛОГОВ[4] = "5";	//НДС 20%
СООТВЕТСТВИЕНАЛОГОВ[5] = "1";	//Без НДС
СООТВЕТСТВИЕНАЛОГОВ[6] = "2";	//НДС 0%

_ЕСТЬМАРКИРОВКА	= VAL(ЗАПРОС("SELECT CASE WHEN EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE (TABLE_NAME = N'sprres') AND (COLUMN_NAME = N'f_mark')) THEN 1 ELSE 0 END"));
_ЕСТЬТИПМАРКИРОВКИ	= VAL( ЗАПРОС("SELECT CASE WHEN EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE (TABLE_NAME = N'sprres') AND (COLUMN_NAME = N'markgroup')) THEN 1 ELSE 0 END") );

ДОБАВИТЬКОНТЕКСТ("SELECT temp.code AS id, temp.barcode, temp.name, temp.cname, temp.cena, temp.kolp, temp.kodn, temp.article, spr.fractqty AS weighted,
				CASE WHEN spr.d_litr <> 0 THEN STR( spr.d_litr, 10, 3 ) + ' ' + spr.edd_litr 
					 WHEN spr.weight <> 0 THEN STR( spr.weight, 10, 3 ) + ' ' + spr.ed_weight
					 ELSE '' END AS volweight,
					 spr.nnvid, spr.d_litr, spr.a_proc, dbo.fn_getalcocodes(spr.code) as alcocodes, spr.ed AS ed, (SELECT TOP 1 ex_code FROM spredn WHERE code = spr.ed) AS ed_code,
					 " + ЕСЛИ(_ЕСТЬМАРКИРОВКА==1, "spr.f_mark", "0") + " AS f_mark, " + ЕСЛИ(_ЕСТЬТИПМАРКИРОВКИ==1, "spr.markgroup", "0") + " AS markgroup
				FROM " +  Товары + " temp 
				INNER JOIN sprres spr ON spr.maincode = temp.code","СписокТоваров");

ВЫБРАТЬКОНТЕКСТ( "СписокТоваров" );
КоличествоСтрокОбщее = КоличествоСтрок("СписокТоваров");
Индикатор("Выгрузка товаров",КоличествоСтрокОбщее);
КоличествоСтрок=0;
ПЕРЕЙТИВНАЧАЛО("СписокТоваров");
WHILE ( !КОНЕЦКОНТЕКСТА( "СписокТоваров" ) )
{
	//СИСТЕМНОЕСООБЩЕНИЕ( "Пожалуйста, подождите.");
	//индикатор
	КоличествоСтрок++;
	if ( КоличествоСтрок % 10 == 0 ) Индикатор( КоличествоСтрок, " Выгрузка товаров. Обработка " + Alltrim(КоличествоСтрок) + " из " + ALLTRIM(КоличествоСтрокОбщее) + "" );
	//индикатор
	IF (!ТОВАРЫБЕЗЦЕНЫ AND VAL(СписокТоваров.cena) == 0)
	{
		ПРОПУСТИТЬ(1, "СписокТоваров");
		CONTINUE;
	}
	uuid = СписокТоваров.id;
	IF (ПУСТО(uuid))
	{
		ПРОПУСТИТЬ(1, "СписокТоваров");
		CONTINUE;
	}
	
	//**
	//запишем файлы если количество элементов равно КоличествоТоваровВОдномЗапросе
	IF (КоличествоТоваровНовые == КоличествоТоваровВОдномЗапросе)
	{
		СтрокаТоваров += "]"; //закрывающая квадратная скобка строки
		
		СписокТоваров = "{";
		СписокТоваров += """items"":" + СтрокаТоваров + ",";
		СписокТоваров += ДАННЫЕ_JSON("organizationId", ОрганизацияИД);
		СписокТоваров += "}";
		//запрос на создание товаров
		ФайлОбмена	= ФАЙЛОТКРЫТЬ( ИмяФайлаОбмена, 1, 1 );
		ФАЙЛУСТАНОВИТЬУКАЗАТЕЛЬ( ФайлОбмена, 0, 0, 2 );
		ФАЙЛЗАПИСАТЬСТРОКУ( ФайлОбмена, ПЕРЕКОДИРОВАТЬ(СписокТоваров, "ANSI", "UTF-8"));
		//ФАЙЛЗАКРЫТЬ( ФайлОбмена );
				
		АдресРесурса = "/cashdesk-api/v1/protected/nomenclatures/list/create";
		ФАЙЛУСТАНОВИТЬУКАЗАТЕЛЬ( ФайлОбмена, 0 );
		ДанныеДляОтправки = ФАЙЛПРОЧИТАТЬ( ФайлОбмена, "S", ФАЙЛРАЗМЕР( ФайлОбмена ));
		ФайлЗакрыть( ФайлОбмена );
		СИСТЕМНОЕСООБЩЕНИЕ("Отправка товаров в кабинет БИФИТ");
		
		Ответ = RESTAPI.БИФИТ_POSTЗАПРОС(_АДРЕССЕРВЕРАБИФИТ, АдресРесурса, ДанныеДляОтправки, БифитТокен, "");
				
		IF (ПУСТО(Ответ) OR (Ответ == false))
		{
			_КОДОШИБКИ		= "001";
			_ТЕКСТОШИБКИ	= "ККМ '" + ALLTRIM( _ОБОРУДОВАНИЕНАИМЕНОВАНИЕ ) + "'. Не удалось передать данные в кабинет БИФИТ'";
			_ОШИБКАВЫПОЛНЕНИЯ	= true;
			RETURN false;	
		}
		
		КоличествоТоваровНовые = 0;
		//Создадим новую строку для товаров
		СтрокаТоваров = "";
		СтрокаТоваров = СтрокаТоваров + "[";
		// Если файл с товарами уже существовал, то закрываем его
		IF  ( ФайлОбмена != -1 ) ФайлЗакрыть( ФайлОбмена );
		// Создаем новый файл
		ИмяФайлаОбмена = RESTAPI.БИФИТ_ФАЙЛОБМЕНА(path_out, "ВЫГРУЗКАJSON");
	}
	
	mCode = ALLTRIM( СписокТоваров.id );  //код
	barCodes[0] = ALLTRIM( СписокТоваров.barcode ); //массив штрихкодов
	mName			= СписокТоваров.name + ЕСЛИ( IN_PARAM_NAME_WEIGHT == 0, "", " " + ALLTRIM( СписокТоваров.volweight ) );
	// Краткое наименование используется для чека
	mCname			= СписокТоваров.cname + ЕСЛИ( IN_PARAM_NAME_WEIGHT == 0, "", " " + ALLTRIM( СписокТоваров.volweight ) );
	// Пивную продукцию теперь не выгружаем как алкоголь
	ПивнаяПродукция	= VAL( СписокТоваров.nnvid ) >= 500 OR ВСПИСКЕ( VAL( СписокТоваров.nnvid ), 261, 262, 263 );
	mAlco			= VAL( СписокТоваров.nnvid ) > 0 AND !ПивнаяПродукция;
	mNNVid			= СписокТоваров.nnvid;
	mVolume			= СписокТоваров.d_litr;
	mAProc			= СписокТоваров.a_proc;
	alcoCodes[0] 	= СписокТоваров.alcocodes; //массив алкокодов
	mEdn			= СписокТоваров.ed_code;
	mWeighted		= СписокТоваров.weighted == 1;
	price 			= VAL( STR( СписокТоваров.cena, 8, 2 )); //цена продажи
	costPrice		= 0; //закупочная цена
		
	КоличествоТоваровНовые++;
		
	tax = ЕСЛИ( f_nalogs, СООТВЕТСТВИЕНАЛОГОВ[VAL( СписокТоваров.kodn )], "1"); //налоги
	articleNumber = СписокТоваров.article; //артикул
	markType = ЕСЛИ(ПивнаяПродукция,"ALCOHOL", ЕСЛИ(mAlco,"ALCOHOL", "UNKNOWN")); //тип товара
	IF ( !ПУСТО(СписокТоваров.f_mark) AND СписокТоваров.f_mark <> 0 )
	{
		ТипМаркировки = СписокТоваров.markgroup;
		IF ( VAL( ТипМаркировки ) == 5 ) //табачная продукция
		{
			markType = "TOBACCO";			
		}
		ELSE IF ( VAL( ТипМаркировки ) == 1520 ) //обувь
		{
			markType = "SHOES";			
		}
		//ELSE IF ( VAL( ТипМаркировки ) == 2 ) //меховые изделия (на дату 22.07.2019 нет в формате обмена)
		//{
		//	_type = "?";
		//}
		//ELSE IF ( VAL( ТипМаркировки ) == 3 ) //лекарства (на дату 22.07.2019 нет в формате обмена)
		//{
		//	_type = "?";			
		//}
	}
	adultsOnly = ПивнаяПродукция OR mAlco;	
	IF (КоличествоТоваровНовые > 1) 
		СтрокаТоваров += ",";
	
	СтрокаТоваров += "{"; //ФАЙЛЗАПИСАТЬСТРОКУ( ДескрипторФайла,Отступ( 1 ) + "{");
	
	//тэги
	СтрокаТоваров +=  ДАННЫЕ_JSON("externalCode", uuid) + ",";
	СтрокаТоваров +=  ДАННЫЕ_JSON("name", mName) + ",";
	СтрокаТоваров +=  ДАННЫЕ_JSON("grouped", false) + ","; //признак папки
	//СтрокаТоваров +=  ДАННЫЕ_JSON("parentId", "null") + ","; //родитель
	СтрокаТоваров +=  """parentId"": null" + ","; //родитель
	СтрокаТоваров +=  ДАННЫЕ_JSON("markType", markType) + ",";
	СтрокаТоваров +=  ДАННЫЕ_JSON("type", "DEFAULT") + ",";
	СтрокаТоваров +=  ДАННЫЕ_JSON("organizationId", ОрганизацияИД) + ",";
	СтрокаТоваров +=  ДАННЫЕ_JSON("adultsOnly", adultsOnly) + ",";
	СтрокаТоваров +=  ДАННЫЕ_JSON("purchasePrice", costPrice) + ",";
	СтрокаТоваров +=  ДАННЫЕ_JSON("sellingPrice", price) + ",";
	СтрокаТоваров +=  ДАННЫЕ_JSON("volume",mVolume) + ",";	
	СтрокаТоваров +=  ДАННЫЕ_JSON("weighted",mWeighted) + ",";
		
	IF (!ПУСТО(barCodes[0]))
		СтрокаТоваров += """barcodes"":[""" + STRTRAN(barCodes[0],",",""",""") + """]" + ",";
	
	IF (!ПУСТО(articleNumber))
		СтрокаТоваров += ДАННЫЕ_JSON("vendorCode",""""+articleNumber+"""") + ",";
	
	СтрокаТоваров += ДАННЫЕ_JSON("vatId", tax);
	СтрокаТоваров += "}";
	
	ПРОПУСТИТЬ(1, "СписокТоваров");
}
УДАЛИТЬКОНТЕКСТ( "СписокТоваров" );

СтрокаТоваров = СтрокаТоваров + "]";

IF (!ПУСТО(СтрокаТоваров) AND СтрокаТоваров <> "]")
{
	СписокТоваров = "{";
	СписокТоваров += """items"":" + СтрокаТоваров + ",";
	СписокТоваров += ДАННЫЕ_JSON("organizationId", ОрганизацияИД);
	СписокТоваров += "}";
	//запрос на создание товаров
	ФайлОбмена	= ФАЙЛОТКРЫТЬ( ИмяФайлаОбмена, 1, 1 );
	ФАЙЛУСТАНОВИТЬУКАЗАТЕЛЬ( ФайлОбмена, 0, 0, 2 );
	ФАЙЛЗАПИСАТЬСТРОКУ( ФайлОбмена, ПЕРЕКОДИРОВАТЬ(СписокТоваров, "ANSI", "UTF-8"));
	//ФАЙЛЗАКРЫТЬ( ФайлОбмена );
	
	АдресРесурса = "/cashdesk-api/v1/protected/nomenclatures/list/create";
	ФАЙЛУСТАНОВИТЬУКАЗАТЕЛЬ( ФайлОбмена, 0 );
	ДанныеДляОтправки = ФАЙЛПРОЧИТАТЬ( ФайлОбмена, "S", ФАЙЛРАЗМЕР( ФайлОбмена ));
	ФайлЗакрыть( ФайлОбмена );
	СИСТЕМНОЕСООБЩЕНИЕ("Отправка товаров в кабинет БИФИТ");
	
	Ответ = RESTAPI.БИФИТ_POSTЗАПРОС(_АДРЕССЕРВЕРАБИФИТ, АдресРесурса, ДанныеДляОтправки, БифитТокен, "");
			
	IF (ПУСТО(Ответ) OR (Ответ == false))
	{
		_КОДОШИБКИ		= "001";
		_ТЕКСТОШИБКИ	= "ККМ '" + ALLTRIM( _ОБОРУДОВАНИЕНАИМЕНОВАНИЕ ) + "'. Не удалось передать данные в кабинет БИФИТ'";
		_ОШИБКАВЫПОЛНЕНИЯ	= true;
		RETURN false;	
	}
	
	ИНДИКАТОР( );
	//ФАЙЛУДАЛИТЬ( ИмяФайлаОтправки );
}
ФайлЗакрыть( ФайлОбмена );
ФайлОбмена = -1;

Заголовки[0] = "";
Заголовки[1] = "";
Заголовки[2] = "";
Заголовки[3] = "";

RETURN true;
